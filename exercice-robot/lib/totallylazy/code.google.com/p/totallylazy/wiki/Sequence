
 



 
 
 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="http://code.google.com/p/totallylazy/wiki/Sequence" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"profileUrl":null,"token":null,"assetHostPath":"http://www.gstatic.com/codesite/ph","domainName":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/17134919371905794448","projectHomeUrl":"/p/totallylazy","relativeBaseUrl":"","projectName":"totallylazy","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 _gaq.push(
 ['projectTracker._setAccount', 'UA-24290734-1'],
 ['projectTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>Sequence - 
 totallylazy -
 
 Sequence - 
 Another functional library for Java - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/totallylazy/hgchanges/basic?repo=wiki&amp;path=/Sequence.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Ftotallylazy%2Fwiki%2FSequence&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Ftotallylazy%2Fwiki%2FSequence" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/totallylazy">
 <a href="/p/totallylazy/">
 
 
 <img src="/p/totallylazy/logo?cct=1346864724"
 alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/totallylazy/"><span itemprop="name">totallylazy</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/totallylazy/"><span itemprop="description">Another functional library for Java</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/totallylazy/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/totallylazy/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/totallylazy/w/list" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/totallylazy/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/totallylazy/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/totallylazy/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
>

 







 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">Sequence</span>
 &nbsp;
 <div> 
 
 <i>Sequence</i>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Wed Nov  7 07:58:35 2012">
 Nov 7 (4 days ago)</span>
 
 by 

 <a class="userlink"
 href="/u/111991973070133309521/">server.b...@gmail.com</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <h1><a name="Sequence"></a>Sequence<a href="#Sequence" class="section_anchor"></a></h1><h2><a name="Contents"></a>Contents<a href="#Contents" class="section_anchor"></a></h2><ul><li><a href="#Head">Head</a> </li><li><a href="#Head_option">Head option</a> </li><li><a href="#Last">Last</a> </li><li><a href="#Last_option">Last option</a> </li><li><a href="#Tail">Tail</a> </li><li><a href="#Init">Init</a> </li><li><a href="#Supports_shuffle">Supports shuffle</a> </li><li><a href="#Supports_reduce_with_identity_function">Supports reduce with identity function</a> </li><li><a href="#Supports_applicative_usage">Supports applicative usage</a> </li><li><a href="#Recursive_call_only_ends_when_there_is_no_remainder">Recursive call only ends when there is no remainder</a> </li><li><a href="#Supports_recursive_split_on">Supports recursive split on</a> </li><li><a href="#Supports_split_on">Supports split on</a> </li><li><a href="#Supports_recursive_split_when">Supports recursive split when</a> </li><li><a href="#Supports_split_when">Supports split when</a> </li><li><a href="#Supports_reduce_right">Supports reduce right</a> </li><li><a href="#Supports_fold_right">Supports fold right</a> </li><li><a href="#Supports_fold_right_with_infinite_sequence_if_function_terminates_early_and_uses_pairs">Supports fold right with infinite sequence if function terminates early and uses pairs</a> </li><li><a href="#Supports_reduce_right_with_infinite_sequence_if_function_terminates_early_and_uses_pairs">Supports reduce right with infinite sequence if function terminates early and uses pairs</a> </li><li><a href="#Supports_break">Supports break</a> </li><li><a href="#Supports_span">Supports span</a> </li><li><a href="#Supports_split_at">Supports split at</a> </li><li><a href="#Supports_recursive_split_at">Supports recursive split at</a> </li><li><a href="#Supports_equality">Supports equality</a> </li><li><a href="#Supports_hash_codes">Supports hash codes</a> </li><li><a href="#Supports_group_by_and_preserves_order">Supports group by and preserves order</a> </li><li><a href="#Supports_to_map_and_preserves_order">Supports to map and preserves order</a> </li><li><a href="#Supports_partition">Supports partition</a> </li><li><a href="#Supports_partition_on_forward_only_sequence">Supports partition on forward only sequence</a> </li><li><a href="#Supports_reverse">Supports reverse</a> </li><li><a href="#Supports_size">Supports size</a> </li><li><a href="#Can_realise_a_sequence">Can realise a sequence</a> </li><li><a href="#Supports_unsafe_cast">Supports unsafe cast</a> </li><li><a href="#Supports_safe_cast">Supports safe cast</a> </li><li><a href="#Supports_unique_and_preserves_order">Supports unique and preserves order</a> </li><li><a href="#Supports_unique_and_can_be_iterated_multiple_times">Supports unique and can be iterated multiple times</a> </li><li><a href="#Supports_unique_with_callable">Supports unique with callable</a> </li><li><a href="#Supports_sort">Supports sort</a> </li><li><a href="#Supports_sort_descending">Supports sort descending</a> </li><li><a href="#Supports_sort_by">Supports sort by</a> </li><li><a href="#When_sorting_with_nulls_they_always_come_last">When sorting with nulls they always come last</a> </li><li><a href="#Supports_sort_by_with_composite_comparator">Supports sort by with composite comparator</a> </li><li><a href="#Supports_sort_by_size_and_length">Supports sort by size and length</a> </li><li><a href="#Supports_cons">Supports cons</a> </li><li><a href="#Supports_join">Supports join</a> </li><li><a href="#Supports_add">Supports add</a> </li><li><a href="#Supports_try_pick">Supports try pick</a> </li><li><a href="#Supports_pick">Supports pick</a> </li><li><a href="#Supports_find">Supports find</a> </li><li><a href="#Supports_finding_the_first_some">Supports finding the first some</a> </li><li><a href="#Supports_contains">Supports contains</a> </li><li><a href="#Supports_exists">Supports exists</a> </li><li><a href="#Supports_for_all">Supports for all</a> </li><li><a href="#Can_filter_null">Can filter null</a> </li><li><a href="#Supports_remove">Supports remove</a> </li><li><a href="#Can_convert_to_array">Can convert to array</a> </li><li><a href="#Can_convert_to_list">Can convert to list</a> </li><li><a href="#Can_convert_to_deque">Can convert to deque</a> </li><li><a href="#Supports_is_empty">Supports is empty</a> </li><li><a href="#Supports_to_string">Supports to string</a> </li><li><a href="#Supports_reduce_left">Supports reduce left</a> </li><li><a href="#Supports_fold_to_a_count">Supports fold to a count</a> </li><li><a href="#Supports_fold_left">Supports fold left</a> </li><li><a href="#Supports_for_each">Supports for each</a> </li><li><a href="#Supports_map">Supports map</a> </li><li><a href="#Supports_concurrent_map">Supports concurrent map</a> </li><li><a href="#Supports_concurrent_map_with_custom_executor">Supports concurrent map with custom executor</a> </li><li><a href="#Map_is_lazy">Map is lazy</a> </li><li><a href="#Supports_filter">Supports filter</a> </li><li><a href="#Filter_is_lazy">Filter is lazy</a> </li><li><a href="#Supports_flat_map">Supports flat map</a> </li><li><a href="#Supports_concurrent_flat_map">Supports concurrent flat map</a> </li><li><a href="#Supports_concurrent_flat_map_with_custom_executor">Supports concurrent flat map with custom executor</a> </li><li><a href="#Supports_flatten">Supports flatten</a> </li><li><a href="#Supports_take">Supports take</a> </li><li><a href="#Supports_take_while">Supports take while</a> </li><li><a href="#Supports_drop">Supports drop</a> </li><li><a href="#Supports_drop_while">Supports drop while</a> </li><li><a href="#Supports_zip">Supports zip</a> </li><li><a href="#Supports_zip_to_triple">Supports zip to triple</a> </li><li><a href="#Supports_zip_to_quadruple">Supports zip to quadruple</a> </li><li><a href="#Supports_zip_to_quintuple">Supports zip to quintuple</a> </li><li><a href="#Supports_zip_with_index">Supports zip with index</a> </li><li><a href="#Supports_forward_only">Supports forward only</a> </li><li><a href="#Supports_interruption">Supports interruption</a> </li><li><a href="#Supports_sorting_by_other_iterable_order">Supports sorting by other iterable order</a> </li><li><a href="#Supports_windowed">Supports windowed</a> </li><li><a href="#Supports_intersperse">Supports intersperse</a> </li><li><a href="#Supports_flattening_to_option">Supports flattening to option</a> </li></ul><h3><a name="Head"></a>Head<a href="#Head" class="section_anchor"></a></h3><p>Eagerly return the first element of a sequence, throws NoSuchElementException if empty. </p><pre class="prettyprint">assertThat(sequence(1, 2).head(), is(1));</pre><h3><a name="Head_option"></a>Head option<a href="#Head_option" class="section_anchor"></a></h3><p>Eagerly return the first element of a sequence wrapped in a some, returns none if empty. </p><pre class="prettyprint">assertThat(sequence(1).headOption(), is(some(1)));
assertThat(empty().headOption(), is(none()));</pre><h3><a name="Last"></a>Last<a href="#Last" class="section_anchor"></a></h3><p>Eagerly return the last element of a finite sequence, throws NoSuchElementException if empty. </p><pre class="prettyprint">assertThat(sequence(1, 2, 3).last(), is(3));</pre><h3><a name="Last_option"></a>Last option<a href="#Last_option" class="section_anchor"></a></h3><p>Eagerly return the last element of a finite sequence wrapped in a some, returns none if empty. </p><pre class="prettyprint">assertThat(sequence(1, 2, 3).lastOption(), is(some(3)));
assertThat(empty().lastOption(), is(none()));</pre><h3><a name="Tail"></a>Tail<a href="#Tail" class="section_anchor"></a></h3><p>Lazily returns the elements after the head of the sequence. Lazily throws NoSuchElementException if empty. Works with infinite sequences. </p><pre class="prettyprint">assertThat(sequence(1, 2, 3).tail(), hasExactly(2, 3));
assertThat(sequence(1).tail().isEmpty(), is(true));
try {
    empty().tail().isEmpty();
    fail(&quot;Should have thrown NoSuchElementException&quot;);
} catch (NoSuchElementException e) {
    // all good
}</pre><h3><a name="Init"></a>Init<a href="#Init" class="section_anchor"></a></h3><p>Lazily returns all the elements of a finite sequence except the last one. Lazily throws NoSuchElementException if empty.s </p><pre class="prettyprint">assertThat(sequence(1, 2, 3).init(), hasExactly(1, 2));
assertThat(sequence(1).init().isEmpty(), is(true));
try {
    empty().init().isEmpty();
    fail(&quot;Should have thrown NoSuchElementException&quot;);
} catch (NoSuchElementException e) {
    // all good
}</pre><h3><a name="Supports_shuffle"></a>Supports shuffle<a href="#Supports_shuffle" class="section_anchor"></a></h3><p>This test has a very small chance that it could fail </p><pre class="prettyprint">assertThat(range(1, 100).shuffle(), is(not(range(1, 100))));</pre><h3><a name="Supports_reduce_with_identity_function"></a>Supports reduce with identity function<a href="#Supports_reduce_with_identity_function" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;).reduce(count()), NumberMatcher.is(3));</pre><h3><a name="Supports_applicative_usage"></a>Supports applicative usage<a href="#Supports_applicative_usage" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(empty(Number.class).applicate(one(add(3))), Matchers.is(empty(Number.class)));
assertThat(numbers(9).applicate(Sequences.&lt;Function1&lt;Number, Number&gt;&gt;empty()), Matchers.is(empty(Number.class)));
assertThat(numbers(9).applicate(one(add(3))), Matchers.is(numbers(12)));
assertThat(numbers(9, 1).applicate(one(add(3))), Matchers.is(numbers(12, 4)));
assertThat(numbers(9, 1).applicate(sequence(add(3), multiply(10))), Matchers.is(numbers(12, 4, 90, 10)));

//http://learnyouahaskell.com/functors-applicative-functors-and-monoids#applicative-functors (Lists)
assertThat(applicate(applicate(sequence(add(), multiply()), numbers(1, 2)), numbers(3, 4)), Matchers.is(numbers(4, 5, 5, 6, 3, 4, 6, 8)));</pre><h3><a name="Recursive_call_only_ends_when_there_is_no_remainder"></a>Recursive call only ends when there is no remainder<a href="#Recursive_call_only_ends_when_there_is_no_remainder" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, 0, 0, 2).recursive(splitOn(0)),
        is(sequence(sequence(1, 3), empty(Integer.class), sequence(2))));</pre><h3><a name="Supports_recursive_split_on"></a>Supports recursive split on<a href="#Supports_recursive_split_on" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, -4, 0, 7, -9, 0, 2).recursive(splitOn(0)),
        is(sequence(sequence(1, 3, -4), sequence(7, -9), sequence(2))));</pre><h3><a name="Supports_split_on"></a>Supports split on<a href="#Supports_split_on" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, -4, 0, 7, -9, 0, 2).splitOn(0),
        is(pair(sequence(1, 3, -4), sequence(7, -9, 0, 2))));</pre><h3><a name="Supports_recursive_split_when"></a>Supports recursive split when<a href="#Supports_recursive_split_when" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(numbers(1, 3, -4, 5, 7, -9, 0, 2).recursive(Sequences.&lt;Number&gt;splitWhen(Numbers.lessThan(0))),
        is(sequence(numbers(1, 3), numbers(5, 7), numbers(0, 2))));</pre><h3><a name="Supports_split_when"></a>Supports split when<a href="#Supports_split_when" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(numbers(1, 3, -4, 5, 7, -9, 0, 2).splitWhen(Numbers.lessThan(0)),
        is(pair(numbers(1, 3), numbers(5, 7, -9, 0, 2))));</pre><h3><a name="Supports_reduce_right"></a>Supports reduce right<a href="#Supports_reduce_right" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(numbers(1, 2, 3).reduceRight(add()), NumberMatcher.is(6));</pre><h3><a name="Supports_fold_right"></a>Supports fold right<a href="#Supports_fold_right" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).foldRight(0, add()), NumberMatcher.is(6));</pre><h3><a name="Supports_fold_right_with_infinite_sequence_if_function_terminate"></a>Supports fold right with infinite sequence if function terminates early and uses pairs<a href="#Supports_fold_right_with_infinite_sequence_if_function_terminate" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(repeat(false).foldRight(false, and()), is(false));</pre><h3><a name="Supports_reduce_right_with_infinite_sequence_if_function_termina"></a>Supports reduce right with infinite sequence if function terminates early and uses pairs<a href="#Supports_reduce_right_with_infinite_sequence_if_function_termina" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(repeat(true).reduceRight(or()), is(true));</pre><h3><a name="Supports_break"></a>Supports break<a href="#Supports_break" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3, 4, 1, 2, 3, 4).breakOn(greaterThan(3)),
        is(pair(sequence(1, 2, 3), sequence(4, 1, 2, 3, 4))));
assertThat(sequence(1, 2, 3).breakOn(lessThan(9)),
        is(pair(empty(Integer.class), sequence(1, 2, 3))));
assertThat(sequence(1, 2, 3).breakOn(greaterThan(9)),
        is(pair(sequence(1, 2, 3), empty(Integer.class))));</pre><h3><a name="Supports_span"></a>Supports span<a href="#Supports_span" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3, 4, 1, 2, 3, 4).span(lessThan(3)), is(pair(sequence(1, 2), sequence(3, 4, 1, 2, 3, 4))));
assertThat(sequence(1, 2, 3).span(lessThan(9)), is(pair(sequence(1, 2, 3), Sequences.&lt;Integer&gt;empty())));
assertThat(sequence(1, 2, 3).span(lessThan(0)), is(pair(Sequences.&lt;Integer&gt;empty(), sequence(1, 2, 3))));</pre><h3><a name="Supports_split_at"></a>Supports split at<a href="#Supports_split_at" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;String&gt; data = sequence(&quot;Cat&quot;, &quot;Dog&quot;, &quot;Mouse&quot;, &quot;Rabbit&quot;, &quot;Monkey&quot;);
assertThat(data.splitAt(2), is(pair(sequence(&quot;Cat&quot;, &quot;Dog&quot;), sequence(&quot;Mouse&quot;, &quot;Rabbit&quot;, &quot;Monkey&quot;))));
assertThat(characters(&quot;Hello World!&quot;).splitAt(6).first().toString(&quot;&quot;), is(&quot;Hello &quot;));
assertThat(characters(&quot;Hello World!&quot;).splitAt(6).second().toString(&quot;&quot;), is(&quot;World!&quot;));</pre><h3><a name="Supports_recursive_split_at"></a>Supports recursive split at<a href="#Supports_recursive_split_at" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;String&gt; data = sequence(&quot;Cat&quot;, &quot;Dog&quot;, &quot;Mouse&quot;, &quot;Rabbit&quot;, &quot;Monkey&quot;);
assertThat(data.recursive(Sequences.&lt;String&gt;splitAt(2)), is(sequence(sequence(&quot;Cat&quot;, &quot;Dog&quot;), sequence(&quot;Mouse&quot;, &quot;Rabbit&quot;), sequence(&quot;Monkey&quot;))));</pre><h3><a name="Supports_equality"></a>Supports equality<a href="#Supports_equality" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).equals(sequence(1, 2, 3)), is(true));
assertThat(sequence(1, 2, 3).equals(sequence(3, 2, 1)), is(false));
assertThat(sequence(1, 2, 3).equals(sequence(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)), is(false));
assertThat(sequence(1, 2).equals(sequence(1, 2, 3)), is(false));
assertThat(sequence(1, 2, 3).equals(sequence(1, 2)), is(false));
assertThat(sequence(1, 2, 3).equals(list(1, 2, 3)), is(true));
assertThat(sequence(Dates.date(2000, 1, 1), 1).equals(sequence(Dates.date(2000, 1, 1), 1)), is(true));
assertThat(sequence(Dates.date(2000, 1, 1), 1).equals(sequence(null, 1)), is(false));
assertThat(sequence(null, 1).equals(sequence(Dates.date(2000, 1, 1), 1)), is(false));
assertThat(sequence(1, null, 3).equals(sequence(1, 2, 3)), is(false));
assertThat(sequence(1, 2, 3).equals(sequence(1, null, 3)), is(false));
assertThat(sequence(1, null, 3).equals(sequence(1, null, 3)), is(true));</pre><h3><a name="Supports_hash_codes"></a>Supports hash codes<a href="#Supports_hash_codes" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).hashCode() == sequence(1, 2, 3).hashCode(), is(true));
assertThat(sequence(1, 2, 3).hashCode() == sequence(3, 2, 1).hashCode(), is(true)); // could we make this false easily?
assertThat(sequence(1, 2, 3).hashCode() == sequence(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;).hashCode(), is(false));
assertThat(sequence(1, 2).hashCode() == sequence(1, 2, 3).hashCode(), is(false));
assertThat(sequence(1, 2, 3).hashCode() == sequence(1, 2).hashCode(), is(false));
assertThat(sequence(1, 2, 3).hashCode() == list(1, 2, 3).hashCode(), is(false));
assertThat(sequence(1, null, 3, objectWithHashCodeOf(0)).hashCode() != 0, is(true));</pre><h3><a name="Supports_group_by_and_preserves_order"></a>Supports group by and preserves order<a href="#Supports_group_by_and_preserves_order" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Group&lt;Number, Integer&gt;&gt; groups = sequence(1, 2, 3, 4).groupBy(Numbers.mod(2));
assertThat(groups.first().key(), NumberMatcher.is(1));
assertThat(groups.first(), hasExactly(1, 3));
assertThat(groups.second().key(), NumberMatcher.is(0));
assertThat(groups.second(), hasExactly(2, 4));</pre><h3><a name="Supports_to_map_and_preserves_order"></a>Supports to map and preserves order<a href="#Supports_to_map_and_preserves_order" class="section_anchor"></a></h3><pre class="prettyprint">Map&lt;Number, List&lt;Integer&gt;&gt; groups = sequence(1, 4, 2, 3).toMap(Numbers.mod(2));
assertThat(groups.get(0), hasExactly(4, 2));
assertThat(groups.get(1), hasExactly(1, 3));</pre><h3><a name="Supports_partition"></a>Supports partition<a href="#Supports_partition" class="section_anchor"></a></h3><pre class="prettyprint">Pair&lt;Sequence&lt;Integer&gt;, Sequence&lt;Integer&gt;&gt; result = sequence(1, 2, 3, 4).partition(even());
assertThat(result.first(), hasExactly(2, 4));
assertThat(result.second(), hasExactly(1, 3));</pre><h3><a name="Supports_partition_on_forward_only_sequence"></a>Supports partition on forward only sequence<a href="#Supports_partition_on_forward_only_sequence" class="section_anchor"></a></h3><pre class="prettyprint">Pair&lt;Sequence&lt;Integer&gt;, Sequence&lt;Integer&gt;&gt; result = sequence(1, 2, 3, 4).forwardOnly().partition(even());
assertThat(result.first(), hasExactly(2, 4));
assertThat(result.second(), hasExactly(1, 3));</pre><h3><a name="Supports_reverse"></a>Supports reverse<a href="#Supports_reverse" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).reverse(), hasExactly(3, 2, 1));</pre><h3><a name="Supports_size"></a>Supports size<a href="#Supports_size" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(range(10000000000L, 10000000099L).size(), NumberMatcher.is(100));</pre><h3><a name="Can_realise_a_sequence"></a>Can realise a sequence<a href="#Can_realise_a_sequence" class="section_anchor"></a></h3><pre class="prettyprint">CountingCallable&lt;Integer&gt; counting = counting();
Sequence&lt;Integer&gt; lazy = sequence(counting).map(call(Integer.class));
assertThat(counting.count(), is(0));
assertThat(lazy, hasExactly(0)); // this will increment count by 1
Sequence&lt;Integer&gt; realised = lazy.realise(); // this will increment count by 1
assertThat(counting.count(), is(2));
assertThat(realised, hasExactly(1));
assertThat(realised, hasExactly(1));</pre><h3><a name="Supports_unsafe_cast"></a>Supports unsafe cast<a href="#Supports_unsafe_cast" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;? extends Predicate&lt;?&gt;&gt; wild = sequence(wildCard());
Sequence&lt;Predicate&lt;Object&gt;&gt; boring = wild.unsafeCast();
assertThat(boring.head().matches(new Cat()), is(true));
assertThat(boring.head().matches(null), is(false));</pre><h3><a name="Supports_safe_cast"></a>Supports safe cast<a href="#Supports_safe_cast" class="section_anchor"></a></h3><pre class="prettyprint">Cat freaky = new Cat(), fatty = new Cat();
Dog buster = new Dog();
Sequence&lt;Animal&gt; animals = sequence(freaky, fatty, buster);
Sequence&lt;Cat&gt; cats = animals.safeCast(Cat.class);
Sequence&lt;Dog&gt; dogs = animals.safeCast(Dog.class);
assertThat(cats, hasExactly(freaky, fatty));
assertThat(dogs, hasExactly(buster));</pre><h3><a name="Supports_unique_and_preserves_order"></a>Supports unique and preserves order<a href="#Supports_unique_and_preserves_order" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 1, 4, 3, 2).unique(), hasExactly(1, 2, 4, 3));
assertThat(sequence(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Matt&quot;, &quot;Bob&quot;).unique(), hasExactly(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Bob&quot;));</pre><h3><a name="Supports_unique_and_can_be_iterated_multiple_times"></a>Supports unique and can be iterated multiple times<a href="#Supports_unique_and_can_be_iterated_multiple_times" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;String&gt; unique = sequence(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Matt&quot;, &quot;Bob&quot;).unique();
assertThat(unique, hasExactly(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Bob&quot;));
assertThat(unique, hasExactly(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Bob&quot;));

Sequence&lt;String&gt; uniqueWithCallable = sequence(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Dominic&quot;, &quot;Mary&quot;).unique(Strings.characterAt(0));
assertThat(uniqueWithCallable, hasExactly(&quot;Matt&quot;, &quot;Dan&quot;));
assertThat(uniqueWithCallable, hasExactly(&quot;Matt&quot;, &quot;Dan&quot;));</pre><h3><a name="Supports_unique_with_callable"></a>Supports unique with callable<a href="#Supports_unique_with_callable" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Dominic&quot;, &quot;Mary&quot;).unique(Strings.characterAt(0)), hasExactly(&quot;Matt&quot;, &quot;Dan&quot;));</pre><h3><a name="Supports_sort"></a>Supports sort<a href="#Supports_sort" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sort(sequence(5, 6, 1, 3, 4, 2)), hasExactly(1, 2, 3, 4, 5, 6));
assertThat(sort(sequence(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Bob&quot;)), hasExactly(&quot;Bob&quot;, &quot;Dan&quot;, &quot;Matt&quot;));</pre><h3><a name="Supports_sort_descending"></a>Supports sort descending<a href="#Supports_sort_descending" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sort(sequence(5, 6, 1, 3, 4, 2), Comparators.&lt;Integer&gt;descending()), hasExactly(6, 5, 4, 3, 2, 1));
assertThat(sequence(5, 6, 1, 3, 4, 2).sortBy(Comparators.&lt;Integer&gt;descending()), hasExactly(6, 5, 4, 3, 2, 1));
assertThat(sort(sequence(&quot;Bob&quot;, &quot;Dan&quot;, &quot;Matt&quot;), Comparators.&lt;String&gt;descending()), hasExactly(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Bob&quot;));
assertThat(sequence(&quot;Bob&quot;, &quot;Dan&quot;, &quot;Matt&quot;).sortBy(Comparators.&lt;String&gt;descending()), hasExactly(&quot;Matt&quot;, &quot;Dan&quot;, &quot;Bob&quot;));</pre><h3><a name="Supports_sort_by"></a>Supports sort by<a href="#Supports_sort_by" class="section_anchor"></a></h3><pre class="prettyprint">int[] small = {1};
int[] medium = {1, 2, 3};
int[] large = {1, 2, 3, 4, 5, 6};
Sequence&lt;int[]&gt; unsorted = sequence(large, small, medium);
assertThat(unsorted.sortBy(length()), hasExactly(small, medium, large));
assertThat(unsorted.sortBy(ascending(length())), hasExactly(small, medium, large));
assertThat(unsorted.sortBy(descending(length())), hasExactly(large, medium, small));</pre><h3><a name="When_sorting_with_nulls_they_always_come_last"></a>When sorting with nulls they always come last<a href="#When_sorting_with_nulls_they_always_come_last" class="section_anchor"></a></h3><p>This behaviour is like SQL order by, not 100% convinced this is correct so please give feedback </p><pre class="prettyprint">Sequence&lt;Integer&gt; unsorted = sequence(2, null, 1);
assertThat(unsorted.sortBy(returnArgument(Integer.class)), hasExactly(1, 2, null));
assertThat(unsorted.sortBy(ascending(returnArgument(Integer.class))), hasExactly(1, 2, null));
assertThat(unsorted.sortBy(descending(returnArgument(Integer.class))), hasExactly(2, 1, null));</pre><h3><a name="Supports_sort_by_with_composite_comparator"></a>Supports sort by with composite comparator<a href="#Supports_sort_by_with_composite_comparator" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;String&gt; unsorted = Sequences.sequence(&quot;dan&quot;, &quot;tom&quot;, &quot;mateusz&quot;, &quot;stuart&quot;);
final Sequence&lt;String&gt; sorted = unsorted.sortBy(comparators(descending(length()), ascending(Callables.&lt;String&gt;returnArgument())));

assertThat(sorted, hasExactly(&quot;mateusz&quot;, &quot;stuart&quot;, &quot;dan&quot;, &quot;tom&quot;));</pre><h3><a name="Supports_sort_by_size_and_length"></a>Supports sort by size and length<a href="#Supports_sort_by_size_and_length" class="section_anchor"></a></h3><pre class="prettyprint">int[] small = {1};
String medium = &quot;123&quot;;
List&lt;Integer&gt; large = list(1, 2, 3, 4, 5, 6);
Sequence&lt;Integer&gt; veryLarge = sequence(1, 2, 3, 4, 5, 6, 7, 8, 9);
Sequence&lt;Object&gt; unsorted = sequence(large, small, veryLarge, medium);
assertThat(unsorted.sortBy(size()), hasExactly(small, medium, large, veryLarge));
assertThat(unsorted.sortBy(ascending(size())), hasExactly(small, medium, large, veryLarge));
assertThat(unsorted.sortBy(descending(length())), hasExactly(veryLarge, large, medium, small));</pre><h3><a name="Supports_cons"></a>Supports cons<a href="#Supports_cons" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).cons(4), hasExactly(4, 1, 2, 3));
assertThat(cons(4, sequence(1, 2, 3)), hasExactly(4, 1, 2, 3));</pre><h3><a name="Supports_join"></a>Supports join<a href="#Supports_join" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Integer&gt; numbers = sequence(1, 2, 3).join(sequence(4, 5, 6));
assertThat(numbers, hasExactly(1, 2, 3, 4, 5, 6));</pre><h3><a name="Supports_add"></a>Supports add<a href="#Supports_add" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Integer&gt; numbers = sequence(1, 2, 3).add(4);
assertThat(numbers, hasExactly(1, 2, 3, 4));</pre><h3><a name="Supports_try_pick"></a>Supports try pick<a href="#Supports_try_pick" class="section_anchor"></a></h3><pre class="prettyprint">Option&lt;String&gt; converted = sequence(1, 2, 3).tryPick(someVeryExpensiveOperation);
assertThat(converted, is((Option&lt;String&gt;) some(&quot;converted&quot;)));</pre><h3><a name="Supports_pick"></a>Supports pick<a href="#Supports_pick" class="section_anchor"></a></h3><pre class="prettyprint">String converted = sequence(1, 2, 3).pick(someVeryExpensiveOperation);
assertThat(converted, is(&quot;converted&quot;));</pre><h3><a name="Supports_find"></a>Supports find<a href="#Supports_find" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, 5).find(even()), is((Option&lt;Integer&gt;) none(Integer.class)));
assertThat(sequence(1, 2, 3).find(even()), is((Option&lt;Integer&gt;) some(2)));</pre><h3><a name="Supports_finding_the_first_some"></a>Supports finding the first some<a href="#Supports_finding_the_first_some" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(none(Integer.class), some(2), some(3)).flatMap(identity(Integer.class)).headOption(), is((Option&lt;Integer&gt;) some(2)));</pre><h3><a name="Supports_contains"></a>Supports contains<a href="#Supports_contains" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, 5).contains(2), is(false));
assertThat(sequence(1, 2, 3).contains(2), is(true));</pre><h3><a name="Supports_exists"></a>Supports exists<a href="#Supports_exists" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, 5).exists(even()), is(false));
assertThat(sequence(1, 2, 3).exists(even()), is(true));</pre><h3><a name="Supports_for_all"></a>Supports for all<a href="#Supports_for_all" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 3, 5).forAll(odd()), is(true));
assertThat(sequence(1, 2, 3).forAll(odd()), is(false));</pre><h3><a name="Can_filter_null"></a>Can filter null<a href="#Can_filter_null" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; numbers = sequence(1, null, 3).filter(notNullValue());
assertThat(numbers, hasExactly(1, 3));</pre><h3><a name="Supports_remove"></a>Supports remove<a href="#Supports_remove" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; numbers = sequence(1, 2, 3, 2).remove(2);
assertThat(numbers, hasExactly(1, 3, 2));</pre><h3><a name="Can_convert_to_array"></a>Can convert to array<a href="#Can_convert_to_array" class="section_anchor"></a></h3><pre class="prettyprint">final Integer[] array = sequence(1, 2).toArray(Integer.class);
assertThat(array[0], is(1));
assertThat(array[1], is(2));</pre><h3><a name="Can_convert_to_list"></a>Can convert to list<a href="#Can_convert_to_list" class="section_anchor"></a></h3><pre class="prettyprint">final List&lt;Integer&gt; aList = sequence(1, 2).toList();
assertThat(aList, hasExactly(1, 2));</pre><h3><a name="Can_convert_to_deque"></a>Can convert to deque<a href="#Can_convert_to_deque" class="section_anchor"></a></h3><pre class="prettyprint">final Deque&lt;Integer&gt; aList = sequence(1, 2).toDeque();
assertThat(aList, hasExactly(1, 2));</pre><h3><a name="Supports_is_empty"></a>Supports is empty<a href="#Supports_is_empty" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence().isEmpty(), is(true));
assertThat(sequence(1).isEmpty(), is(false));</pre><h3><a name="Supports_to_string"></a>Supports to string<a href="#Supports_to_string" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).toString(), is(&quot;1,2,3&quot;));
assertThat(sequence(1, 2, 3).toString(&quot;:&quot;), is(&quot;1:2:3&quot;));
assertThat(sequence(1, 2, 3).toString(&quot;(&quot;, &quot;, &quot;, &quot;)&quot;), is(&quot;(1, 2, 3)&quot;));</pre><h3><a name="Supports_reduce_left"></a>Supports reduce left<a href="#Supports_reduce_left" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(numbers(1, 2, 3).reduce(sum()), NumberMatcher.is(6));
assertThat(numbers(1, 2, 3).reduceLeft(sum()), NumberMatcher.is(6));</pre><h3><a name="Supports_fold_to_a_count"></a>Supports fold to a count<a href="#Supports_fold_to_a_count" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&quot;Dan&quot;, &quot;Matt&quot;, &quot;Bob&quot;).fold(0, count()), NumberMatcher.is(3));
assertThat(sequence(&quot;Dan&quot;, &quot;Matt&quot;).fold(0, count()), NumberMatcher.is(2));
assertThat(sequence(&quot;Dan&quot;).fold(0, count()), NumberMatcher.is(1));
assertThat(empty().fold(0, count()), NumberMatcher.is(0));</pre><h3><a name="Supports_fold_left"></a>Supports fold left<a href="#Supports_fold_left" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3).fold(0, sum()), NumberMatcher.is(6));
assertThat(sequence(1, 2, 3).foldLeft(0, sum()), NumberMatcher.is(6));</pre><h3><a name="Supports_for_each"></a>Supports for each<a href="#Supports_for_each" class="section_anchor"></a></h3><pre class="prettyprint">final int[] sum = {0};
sequence(1, 2).forEach(new Callable1&lt;Integer, Void&gt;() {
    public Void call(Integer value) {
        sum[0] += value;
        return Runnables.VOID;

    }
});
assertThat(sum[0], is(3));</pre><h3><a name="Supports_map"></a>Supports map<a href="#Supports_map" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;String&gt; strings = sequence(1, 2).map(toString);
assertThat(strings, hasExactly(&quot;1&quot;, &quot;2&quot;));</pre><h3><a name="Supports_concurrent_map"></a>Supports concurrent map<a href="#Supports_concurrent_map" class="section_anchor"></a></h3><pre class="prettyprint">Iterable&lt;String&gt; strings = sequence(1, 2).mapConcurrently(toString);
assertThat(strings, hasExactly(&quot;1&quot;, &quot;2&quot;));</pre><h3><a name="Supports_concurrent_map_with_custom_executor"></a>Supports concurrent map with custom executor<a href="#Supports_concurrent_map_with_custom_executor" class="section_anchor"></a></h3><pre class="prettyprint">ExecutorService executorService = Executors.newCachedThreadPool();
Iterable&lt;String&gt; strings = sequence(1, 2).mapConcurrently(toString, executorService);
assertThat(strings, hasExactly(&quot;1&quot;, &quot;2&quot;));
executorService.shutdown();</pre><h3><a name="Map_is_lazy"></a>Map is lazy<a href="#Map_is_lazy" class="section_anchor"></a></h3><pre class="prettyprint">Iterable&lt;Integer&gt; result = sequence(returns(1), callThrows(new Exception(), Integer.class)).
        map(call(Integer.class));
assertThat(result, startsWith(1));</pre><h3><a name="Supports_filter"></a>Supports filter<a href="#Supports_filter" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Integer&gt; result = sequence(1, 2, 3, 4).filter(even());
assertThat(result, hasExactly(2, 4));</pre><h3><a name="Filter_is_lazy"></a>Filter is lazy<a href="#Filter_is_lazy" class="section_anchor"></a></h3><pre class="prettyprint">Iterable&lt;Integer&gt; result = sequence(returns(1), returns(2), callThrows(new Exception(), Integer.class)).
        map(call(Integer.class)).
        filter(even());
assertThat(result, startsWith(2));</pre><h3><a name="Supports_flat_map"></a>Supports flat map<a href="#Supports_flat_map" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Character&gt; characters = sequence(&quot;Hello&quot;).flatMap(toCharacters());
assertThat(characters, hasExactly(&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;));</pre><h3><a name="Supports_concurrent_flat_map"></a>Supports concurrent flat map<a href="#Supports_concurrent_flat_map" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Character&gt; characters = sequence(&quot;Hello&quot;).flatMapConcurrently(toCharacters());
assertThat(characters, hasExactly(&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;));</pre><h3><a name="Supports_concurrent_flat_map_with_custom_executor"></a>Supports concurrent flat map with custom executor<a href="#Supports_concurrent_flat_map_with_custom_executor" class="section_anchor"></a></h3><pre class="prettyprint">ExecutorService executorService = Executors.newCachedThreadPool();
Sequence&lt;Character&gt; characters = sequence(&quot;Hello&quot;).flatMapConcurrently(toCharacters(), executorService);
assertThat(characters, hasExactly(&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;));
executorService.shutdown();</pre><h3><a name="Supports_flatten"></a>Supports flatten<a href="#Supports_flatten" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Character&gt; characters = Sequences.flatten(sequence(&quot;Hello&quot;).map(toCharacters()));
assertThat(characters, hasExactly(&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;));</pre><h3><a name="Supports_take"></a>Supports take<a href="#Supports_take" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; sequence = sequence(1, 2, 3).take(2);
assertThat(sequence, hasExactly(1, 2));
assertThat(sequence(1).take(2).size(), NumberMatcher.is(1));
assertThat(sequence().take(2).size(), NumberMatcher.is(0));</pre><h3><a name="Supports_take_while"></a>Supports take while<a href="#Supports_take_while" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; sequence = sequence(1, 3, 5, 6, 8, 1, 3).takeWhile(odd());
assertThat(sequence, hasExactly(1, 3, 5));
assertThat(sequence(1).takeWhile(odd()).size(), NumberMatcher.is(1));
assertThat(Sequences.&lt;Number&gt;sequence().takeWhile(odd()).size(), NumberMatcher.is(0));</pre><h3><a name="Supports_drop"></a>Supports drop<a href="#Supports_drop" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; sequence = sequence(1, 2, 3).drop(2);
assertThat(sequence, hasExactly(3));
assertThat(sequence(1).drop(2).size(), NumberMatcher.is(0));
assertThat(sequence().drop(1).size(), NumberMatcher.is(0));</pre><h3><a name="Supports_drop_while"></a>Supports drop while<a href="#Supports_drop_while" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; sequence = sequence(1, 3, 5, 6, 8, 1, 3).dropWhile(odd());
assertThat(sequence, hasExactly(6, 8, 1, 3));
assertThat(sequence(1).dropWhile(odd()).size(), NumberMatcher.is(0));
assertThat(Sequences.&lt;Number&gt;sequence().dropWhile(odd()).size(), NumberMatcher.is(0));</pre><h3><a name="Supports_zip"></a>Supports zip<a href="#Supports_zip" class="section_anchor"></a></h3><pre class="prettyprint">final Sequence&lt;Integer&gt; sequence = sequence(1, 3, 5);

assertThat(sequence.zip(sequence(2, 4, 6, 8)), hasExactly(pair(1, 2), pair(3, 4), pair(5, 6)));
assertThat(sequence.zip(sequence(2, 4, 6)), hasExactly(pair(1, 2), pair(3, 4), pair(5, 6)));
assertThat(sequence.zip(sequence(2, 4)), hasExactly(pair(1, 2), pair(3, 4)));</pre><h3><a name="Supports_zip_to_triple"></a>Supports zip to triple<a href="#Supports_zip_to_triple" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(zip(sequence(1, 3, 5), sequence(2, 4, 6, 8), sequence(&quot;car&quot;, &quot;cat&quot;)), hasExactly(triple(1, 2, &quot;car&quot;), triple(3, 4, &quot;cat&quot;)));
assertThat(sequence(1, 3, 5).zip(sequence(2, 4, 6, 8), sequence(&quot;car&quot;, &quot;cat&quot;)), hasExactly(triple(1, 2, &quot;car&quot;), triple(3, 4, &quot;cat&quot;)));</pre><h3><a name="Supports_zip_to_quadruple"></a>Supports zip to quadruple<a href="#Supports_zip_to_quadruple" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(zip(sequence(1, 3, 5), sequence(2, 4, 6, 8), sequence(&quot;car&quot;, &quot;cat&quot;), sequence(&#x27;C&#x27;)), hasExactly(quadruple(1, 2, &quot;car&quot;, &#x27;C&#x27;)));
assertThat(sequence(1, 3, 5).zip(sequence(2, 4, 6, 8), sequence(&quot;car&quot;, &quot;cat&quot;), sequence(&#x27;C&#x27;)), hasExactly(quadruple(1, 2, &quot;car&quot;, &#x27;C&#x27;)));</pre><h3><a name="Supports_zip_to_quintuple"></a>Supports zip to quintuple<a href="#Supports_zip_to_quintuple" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(zip(sequence(1, 3, 5), sequence(2, 4, 6, 8), sequence(&quot;car&quot;, &quot;cat&quot;), sequence(&#x27;C&#x27;), sequence(&#x27;D&#x27;)), hasExactly(quintuple(1, 2, &quot;car&quot;, &#x27;C&#x27;, &#x27;D&#x27;)));
assertThat(sequence(1, 3, 5).zip(sequence(2, 4, 6, 8), sequence(&quot;car&quot;, &quot;cat&quot;), sequence(&#x27;C&#x27;), sequence(&#x27;D&#x27;)), hasExactly(quintuple(1, 2, &quot;car&quot;, &#x27;C&#x27;, &#x27;D&#x27;)));</pre><h3><a name="Supports_zip_with_index"></a>Supports zip with index<a href="#Supports_zip_with_index" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&quot;Dan&quot;, &quot;Matt&quot;, &quot;Bob&quot;).zipWithIndex(), hasExactly(pair((Number) 0, &quot;Dan&quot;), pair((Number) 1, &quot;Matt&quot;), pair((Number) 2, &quot;Bob&quot;)));</pre><h3><a name="Supports_forward_only"></a>Supports forward only<a href="#Supports_forward_only" class="section_anchor"></a></h3><pre class="prettyprint">Sequence&lt;Integer&gt; sequence = sequence(1, 2, 3, 4).forwardOnly();

assertThat(sequence.headOption(), is(option(1)));
assertThat(sequence.headOption(), is(option(2)));</pre><h3><a name="Supports_interruption"></a>Supports interruption<a href="#Supports_interruption" class="section_anchor"></a></h3><pre class="prettyprint">final int[] count = new int[]{0};
Sequence&lt;Integer&gt; interruptable = repeat(new Function&lt;Integer&gt;() {
    @Override
    public Integer call() throws Exception {
        if (++count[0] == 5) {
            currentThread().interrupt();
        }
        return count[0];
    }
}).interruptable();

try {
    interruptable.realise();
} catch (LazyException e) {
    assertThat(e.getCause(), instanceOf(InterruptedException.class));
    assertThat(count[0], is(5));
}</pre><h3><a name="Supports_sorting_by_other_iterable_order"></a>Supports sorting by other iterable order<a href="#Supports_sorting_by_other_iterable_order" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;).sortBy(indexIn(list(&#x27;F&#x27;, &#x27;E&#x27;, &#x27;D&#x27;))), hasExactly(&#x27;F&#x27;, &#x27;E&#x27;, &#x27;D&#x27;));
assertThat(sequence(pair(&quot;Dan&quot;, &#x27;D&#x27;), pair(&quot;Ray&quot;, &#x27;R&#x27;), pair(&quot;Tom&quot;, &#x27;T&#x27;)).sortBy(second(Character.class).then(indexIn(list(&#x27;T&#x27;, &#x27;R&#x27;, &#x27;D&#x27;)))),
        hasExactly(pair(&quot;Tom&quot;, &#x27;T&#x27;), pair(&quot;Ray&quot;, &#x27;R&#x27;), pair(&quot;Dan&quot;, &#x27;D&#x27;)));</pre><h3><a name="Supports_windowed"></a>Supports windowed<a href="#Supports_windowed" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(1, 2, 3, 4, 5).windowed(3), is(sequence(sequence(1, 2, 3), sequence(2, 3, 4), sequence(3, 4, 5))));</pre><h3><a name="Supports_intersperse"></a>Supports intersperse<a href="#Supports_intersperse" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).intersperse(&quot;x&quot;), hasExactly(&quot;a&quot;, &quot;x&quot;, &quot;b&quot;, &quot;x&quot;, &quot;c&quot;));
assertThat(sequence(&quot;a&quot;).intersperse(&quot;x&quot;), hasExactly(&quot;a&quot;));
assertThat(sequence().intersperse(&quot;x&quot;), isEmpty());
assertThat(repeat(1).intersperse(0).take(5), hasExactly(1, 0, 1, 0, 1));
assertThat(repeat(1).intersperse(0).take(6), hasExactly(1, 0, 1, 0, 1, 0));</pre><h3><a name="Supports_flattening_to_option"></a>Supports flattening to option<a href="#Supports_flattening_to_option" class="section_anchor"></a></h3><pre class="prettyprint">assertThat(sequence(&quot;roger&quot;, &quot;ramjet&quot;).flatOption(), is(some(sequence(&quot;roger&quot;, &quot;ramjet&quot;))));
assertThat(flatOption(sequence(&quot;roger&quot;, &quot;ramjet&quot;)), is(some(sequence(&quot;roger&quot;, &quot;ramjet&quot;))));

assertThat(empty(String.class).flatOption(), is(Option.&lt;Sequence&lt;String&gt;&gt;none()));
assertThat(flatOption(empty(String.class)), is(Option.&lt;Sequence&lt;String&gt;&gt;none()));</pre>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 
 
 
 <br>
 <div class="artifactcomment">
 <span class="indicator">&#9658;</span> <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Ftotallylazy%2Fwiki%2FSequence&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Ftotallylazy%2Fwiki%2FSequence"
 >Sign in</a> to add a comment
 </div>
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="Sequence" >
 <input type="hidden" name="token" value="" >
 </form>


 <script src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_core.js"></script>
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


