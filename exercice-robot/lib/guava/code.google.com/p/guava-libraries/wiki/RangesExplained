
 



 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="http://code.google.com/p/guava-libraries/wiki/RangesExplained" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"profileUrl":null,"token":null,"assetHostPath":"http://www.gstatic.com/codesite/ph","domainName":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/17134919371905794448","projectHomeUrl":"/p/guava-libraries","relativeBaseUrl":"","projectName":"guava-libraries","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>RangesExplained - 
 guava-libraries -
 
 Guava's powerful Range API, explained. - 
 Guava: Google Core Libraries for Java 1.6+ - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/guava-libraries/gitchanges/basic?repo=wiki&amp;path=/RangesExplained.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FRangesExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FRangesExplained" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/guava-libraries">
 <a href="/p/guava-libraries/">
 
 <img src="http://www.gstatic.com/codesite/ph/images/search-48.gif" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/guava-libraries/"><span itemprop="name">guava-libraries</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/guava-libraries/"><span itemprop="description">Guava: Google Core Libraries for Java 1.6+</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/guava-libraries/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/guava-libraries/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/guava-libraries/wiki/GuavaExplained?tm=6" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/guava-libraries/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/guava-libraries/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/guava-libraries/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
 
 style="padding:0 3px 3px 0; margin:0"
 
 
>

 






 
<style type="text/css">
 #wikimaincol { padding-top: 6px; padding-left:1em}
 #sidebarcontainer {
 padding: 1.5em 2px 2px 2px;
 min-width: 15em;
 max-width: 20em;
 overflow:hidden;
}
 .sidebartop ul { margin:0 0 0 .5em; padding-left:0 !important; list-style:none}
 .sidebartop ul ul { margin-left:1em; padding-left:0; list-style:none; display:none}
 .sidebartop li { margin:0 0 2px 0; padding:1px; padding-left:14px; cursor:pointer}
 .sidebartop li a { padding:2px}
 .sidebartop li { background: url(http://www.gstatic.com/codesite/ph/images/plus.gif) no-repeat 1px 3px}
 .sidebartop li.treeopen { background: url(http://www.gstatic.com/codesite/ph/images/minus.gif) no-repeat 1px 3px}
 .sidebartop li.treeleaf { background:none}
 .currentpagelink { 
 font-weight: bold;
 text-decoration: none;
 color: black !important; 
 background: #c3d9ff;
 }
 .sidebartop ul.treeleafcontainer { display:block;}
 .sidebarcontent { 
 vertical-align:top;
 padding-right: 3px;
 border-right: 2px solid #ccc;
 }
</style>



 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td class="sidebarcontent">
 <div class="vt expand" id="wikisidebar">
 <div>
 
 <div style="float:right;">
 <a class="ifExpand" style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Hide sidebar"><b>&lsaquo;&lsaquo;</b></a>
 </div>
 <div class="ifCollapse" style="padding:0 2px">
 <a style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Show sidebar"><b>&rsaquo;&rsaquo;</b></a>
 </div>
 
 
 <div id="sidebarcontainer" class="sidebartop ifExpand">
 <ul><li><a href="/p/guava-libraries/wiki/GuavaExplained">Introduction</a> </li><li>Basic Utilities </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Using/avoiding null</a> </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained#Optional">Optional</a> </li></ul><li><a href="/p/guava-libraries/wiki/PreconditionsExplained">Preconditions</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained">Ordering</a> </li><ul><li><a href="/p/guava-libraries/wiki/OrderingExplained#Creation">Creation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Manipulation">Manipulation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Application">Application</a> </li></ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained">Object methods</a> </li><ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#equals">equals</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#hashCode">hashCode</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#toString">toString</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#compare/compareTo">compare/compareTo</a> </li></ul><li><a href="/p/guava-libraries/wiki/ThrowablesExplained">Throwables</a> </li></ul><li>Collections </li><ul><li><a href="/p/guava-libraries/wiki/ImmutableCollectionsExplained">Immutable collections</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained">New collection types</a> </li><ul><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multiset">Multiset</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multimap">Multimap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#BiMap">BiMap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Table">Table</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#ClassToInstanceMap">ClassToInstanceMap</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained">Utility Classes</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Iterables">Iterables</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Lists">Lists</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Sets">Sets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Maps">Maps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multisets">Multisets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multimaps">Multimaps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Tables">Tables</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained">Extension Utilities</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#Forwarding_Decorators">Forwarding Decorators</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#PeekingIterator">PeekingIterator</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#AbstractIterator">AbstractIterator</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/CachesExplained">Caches</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Applicability">Applicability</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Population">Population</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Eviction">Eviction</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Removal_Listeners">Removal Listeners</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Refresh">Refresh</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Timed_Eviction">Timed Eviction</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Size-based_Eviction">Size Caps</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Reference-based_Eviction">Garbage Collection</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Explicit_Removals">Explicit Removals</a> </li></ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Features">Features</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Statistics">Statistics</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained">Functional Idioms</a> </li><ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions_and_Predicates">Obtaining</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Predicates">Using Predicates</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions">Using Functions</a> </li></ul><li>Concurrency </li><ul><li><a href="/p/guava-libraries/wiki/ListenableFutureExplained">ListenableFuture</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained">Service</a> </li><ul><li><a href="/p/guava-libraries/wiki/ServiceExplained#Using_a_Service">Using</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained#Implementations">Implementations</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/StringsExplained">Strings</a> </li><ul><li><a href="/p/guava-libraries/wiki/StringsExplained#Joiner">Joiner</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Splitter">Splitter</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#CharMatcher">CharMatcher</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Charsets">Charsets</a> </li></ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained">Primitives</a> </li><ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Primitive_array_utilities">Primitive arrays</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#General_utility_methods">General utilities</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Byte_conversion_methods">Byte conversion</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Unsigned_support">Unsigned support</a> </li></ul><li><a href="/p/guava-libraries/wiki/RangesExplained">Ranges</a> </li><ul><li><a href="/p/guava-libraries/wiki/RangesExplained#Building_Ranges">Building</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Operations">Operations</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Discrete_Domains">Discrete Domains</a> </li></ul><li><a href="/p/guava-libraries/wiki/IOExplained">I/O</a> </li><li><a href="/p/guava-libraries/wiki/HashingExplained">Hashing</a> </li><ul><li><a href="/p/guava-libraries/wiki/HashingExplained#BloomFilter">BloomFilter</a> </li></ul><li><a href="/p/guava-libraries/wiki/EventBusExplained">EventBus</a> </li><li><a href="/p/guava-libraries/wiki/MathExplained">Math</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Math_on_Integral_Types">Integral</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Checked_Arithmetic">Overflow Checking</a> </li></ul><li><a href="/p/guava-libraries/wiki/MathExplained#Floating-point_arithmetic">Floating Point</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained">Reflection</a> </li><ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained#TypeToken">TypeToken</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReleaseHistory">Releases</a> </li><ul><li><a href="/p/guava-libraries/wiki/Release13">Release 13</a> </li><li><a href="/p/guava-libraries/wiki/Release12">Release 12</a> </li><li><a href="/p/guava-libraries/wiki/Release11">Release 11</a> </li><li><a href="/p/guava-libraries/wiki/Release10">Release 10</a> </li></ul><li>Tips </li><ul><li><a href="/p/guava-libraries/wiki/PhilosophyExplained">Philosophy</a> </li><li><a href="/p/guava-libraries/wiki/UseGuavaInYourBuild">Building with Guava</a> </li><li><a href="/p/guava-libraries/wiki/UsingProGuardWithGuava">Shrinking JARs with ProGuard</a> </li><li><a href="/p/guava-libraries/wiki/ApacheCommonCollectionsEquivalents">Translating from Apache Commons</a> </li><li><a href="/p/guava-libraries/wiki/Compatibility">Guava and Compatibility</a> </li><li><a href="/p/guava-libraries/wiki/IdeaGraveyard">Idea Graveyard</a> </li><li><a href="/p/guava-libraries/wiki/FriendsOfGuava">Friends of Guava</a> </li><li><a href="/p/guava-libraries/wiki/HowToContribute">How to Contribute</a> </li></ul><li><a href="/p/guava-libraries/wiki/GuavaTermsExplained">Glossary</a> </li><li><a href="http://groups.google.com/group/guava-discuss" rel="nofollow">Mailing List</a> </li><li><a href="http://stackoverflow.com/questions/tagged/guava" rel="nofollow">Stack Overflow</a> </li><li><a href="http://code.google.com/p/memory-measurer/wiki/ElementCostInDataStructures" rel="nofollow">Footprint of JDK/Guava data structures</a> </li></ul>
 </div>
 </div>
</div>

 </td>
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">RangesExplained</span>
 &nbsp;
 <div> 
 
 <i>Guava's powerful Range API, explained.</i>
 
 
 <br/>
 
 <a class="label" style="padding-top: 2px"
 href="/p/guava-libraries/w/list?q=label:explained"
 title=""
 >explained</a>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Mon Jun 11 09:43:35 2012">
 Jun 11, 2012</span>
 
 by 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <p>TODO: lots more examples </p><h1><a name="Example"></a>Example<a href="#Example" class="section_anchor"></a></h1><pre class="prettyprint">List&lt;Double&gt; scores;
Iterable&lt;Double&gt; belowMedianScores = Iterables.filter(scores, Ranges.lessThan(median));
...
Range&lt;Integer&gt; validGrades = Ranges.closed(1, 12);
for(int grade : validGrades.asSet(DiscreteDomains.integers())) {
  ...
}</pre><h1><a name="Introduction"></a>Introduction<a href="#Introduction" class="section_anchor"></a></h1><p>A range, sometimes known as an interval, is a convex (informally, &quot;contiguous&quot; or &quot;unbroken&quot;) portion of a particular domain. Formally, convexity means that for any <tt>a &lt;= b &lt;= c</tt>, <tt>range.contains(a) &amp;&amp; range.contains(c)</tt> implies that <tt>range.contains(b)</tt>. </p><p>Ranges may &quot;extend to infinity&quot; -- for example, the range &quot;x &gt; 3&quot; contains arbitrarily large values -- or may be finitely constrained, for example &quot;2 &lt;= x &lt; 5&quot;.  We will use the more compact notation, familiar to programmers with a math background: </p><ul><li>(a..b) = {x | a &lt; x &lt; b} </li><li>[a..b] = {x | a &lt;= x &lt;= b} </li><li>[a..b) = {x | a &lt;= x &lt; b} </li><li>(a..b] = {x | a &lt; x &lt;= b} </li><li>(a..+∞) = {x | x &gt; a} </li><li>[a..+∞) = {x | x &gt;= a} </li><li>(-∞..b) = {x | x &lt; b} </li><li>(-∞..b] = {x | x &lt;= b} </li><li>(-∞..+∞) = all values </li></ul><p>The values a and b used above are called endpoints.  To improve consistency, Guava&#x27;s notion of <tt>Range</tt> requires that the upper endpoint may not be less than the lower endpoint. The endpoints may be equal only if at least one of the bounds is closed: </p><ul><li>[a..a] : singleton range </li><li>[a..a); (a..a] : empty, but valid </li><li>(a..a) : invalid </li></ul><p>A range in Guava has the type <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html" rel="nofollow">Range&lt;C&gt;</a>.  All ranges are <i>immutable</i>.   </p><h1><a name="Building_Ranges"></a>Building Ranges<a href="#Building_Ranges" class="section_anchor"></a></h1><p>Ranges can be obtained from the <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html" rel="nofollow">Ranges</a> utility class. </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> (a..b) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#open(java.lang.Comparable,java.lang.Comparable)" rel="nofollow">open(C, C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>[</tt>a..b<tt>]</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#closed(java.lang.Comparable,java.lang.Comparable)" rel="nofollow">closed(C, C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>[</tt>a..b) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#closedOpen(java.lang.Comparable,java.lang.Comparable)" rel="nofollow">closedOpen(C, C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> (a..b<tt>]</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#openClosed(java.lang.Comparable,java.lang.Comparable)" rel="nofollow">openClosed(C, C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> (a..+∞) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#greaterThan(C)" rel="nofollow">greaterThan(C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>[</tt>a..+∞) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#atLeast(C)" rel="nofollow">atLeast(C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> (-∞..b) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#lessThan(C)" rel="nofollow">lessThan(C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> (-∞..b<tt>]</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#atMost(C)" rel="nofollow">atMost(C)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> (-∞..+∞) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#all()" rel="nofollow">all()</a> </td></tr> </table></p><pre class="prettyprint">Ranges.closed(&quot;left&quot;, &quot;right&quot;); // all strings lexographically between &quot;left&quot; and &quot;right&quot; inclusive
Ranges.lessThan(4.0); // double values strictly less than 4</pre><p>Additionally, Range instances can be constructed by passing the bound types explicitly: </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> Bounded on both ends </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType)" rel="nofollow">range(C, BoundType, C, BoundType)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> Unbounded on top ((a..+∞) or <tt>[</tt>a..+∞)) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#downTo(java.lang.Comparable,com.google.common.collect.BoundType)" rel="nofollow">downTo(C, BoundType)</a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> Unbounded on bottom ((-∞..b) or (-∞..b]) </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ranges.html#upTo(java.lang.Comparable,com.google.common.collect.BoundType)" rel="nofollow">upTo(C, BoundType)</a> </td></tr> </table></p><p>Here, <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/BoundType.html" rel="nofollow">BoundType</a> is an enum containing the values <tt>CLOSED</tt> and <tt>OPEN</tt>. </p><pre class="prettyprint">Ranges.downTo(4, boundType); // allows you to decide whether or not you want to include 4
Ranges.range(1, CLOSED, 4, OPEN); // another way of writing Ranges.closedOpen(1, 4)</pre><h1><a name="Operations"></a>Operations<a href="#Operations" class="section_anchor"></a></h1><p>The fundamental operation of a <tt>Range</tt> is its <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#contains(C)" rel="nofollow">contains(C)</a> methods, which behaves exactly as you might expect.  Additionally, a <tt>Range</tt> may be used as a <tt>Predicate</tt>, and used in <a href="/p/guava-libraries/wiki/FunctionalExplained">functional idioms</a>.  Any <tt>Range</tt> also supports <tt>containsAll(Iterable&lt;? extends C&gt;)</tt>. </p><pre class="prettyprint">Ranges.closed(1, 3).contains(2); // returns true
Ranges.closed(1, 3).contains(4); // returns false
Ranges.lessThan(5).contains(5); // returns false
Ranges.closed(1, 4).containsAll(Ints.asList(1, 2, 3)); // returns true</pre><h2><a name="Query_Operations"></a>Query Operations<a href="#Query_Operations" class="section_anchor"></a></h2><p>To look at the endpoints of a range, <tt>Range</tt> exposes the following methods: <ul><li><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#hasLowerBound()" rel="nofollow">hasLowerBound()</a> and <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#hasUpperBound()" rel="nofollow">hasUpperBound()</a>, which check if the range has the specified endpoints, or goes on &quot;through infinity.&quot; </li><li><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#lowerBoundType()" rel="nofollow">lowerBoundType()</a> and <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#upperBoundType()" rel="nofollow">upperBoundType()</a> return the <tt>BoundType</tt> for the corresponding endpoint, which can be either <tt>CLOSED</tt> or <tt>OPEN</tt>.  If this range does not have the specified endpoint, the method throws an <tt>IllegalStateException</tt>. </li><li><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#lowerEndpoint()" rel="nofollow">lowerEndpoint()</a> and <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#upperEndpoint()" rel="nofollow">upperEndpoint()</a> return the endpoints on the specified end, or throw an <tt>IllegalStateException</tt> if the range does not have the specified endpoint. </li><li><a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Range.html#isEmpty()" rel="nofollow">isEmpty()</a> tests if the range is empty, that is, it has the form <tt>[</tt>a,a) or (a,a<tt>]</tt>. </li></ul></p><pre class="prettyprint">Ranges.closedOpen(4, 4).isEmpty(); // returns true
Ranges.openClosed(4, 4).isEmpty(); // returns true
Ranges.closed(4, 4).isEmpty(); // returns false
Ranges.open(4, 4).isEmpty(); // Ranges.open throws IllegalArgumentException

Ranges.closed(3, 10).lowerEndpoint(); // returns 3
Ranges.open(3, 10).lowerEndpoint(); // returns 3
Ranges.closed(3, 10).lowerBoundType(); // returns CLOSED
Ranges.open(3, 10).upperBoundType(); // returns OPEN</pre><h2><a name="Interval_Operations"></a>Interval Operations<a href="#Interval_Operations" class="section_anchor"></a></h2><h3><a name="encloses"></a><tt>encloses</tt><a href="#encloses" class="section_anchor"></a></h3><p>The most basic relation on ranges is <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#encloses(com.google.common.collect.Range)" rel="nofollow"><tt>encloses(Range)</tt></a>, which is true if the bounds of the inner range do not extend outside the bounds of the outer range.  This is solely dependent on comparisons between the endpoints! </p><ul><li>[3..6] encloses [4..5] </li><li>(3..6) encloses (3..6) </li><li>[3..6] encloses [4..4) (even though the latter is empty) </li><li>(3..6] does not enclose [3..6] </li><li>[4..5] does not enclose (3..6) <strong>even though it contains every value contained by the latter range</strong>, although use of discrete domains can address this (see below) </li><li>[3..6] does not enclose (1..1] <strong>even though it contains every value contained by the latter range</strong> </li></ul><p><tt>encloses</tt> is a <a href="/p/guava-libraries/wiki/GuavaTermsExplained#partial_ordering">partial ordering</a>. </p><p>Given this, <tt>Range</tt> provides the following operations: </p><h3><a name="isConnected"></a><tt>isConnected</tt><a href="#isConnected" class="section_anchor"></a></h3><p><a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/Range.html#isConnected(com.google.common.collect.Range)" rel="nofollow"><tt>Range.isConnected(Range)</tt></a>, which tests if these ranges are <i>connected</i>.  Specifically, <tt>isConnected</tt> tests if there is some range enclosed by both of these ranges, but this is equivalent to the mathematical definition that the union of the ranges must form a connected set (except in the special case of empty ranges). </p><p><tt>isConnected</tt> is a <a href="/p/guava-libraries/wiki/GuavaTermsExplained#reflexive">reflexive</a>, <a href="/p/guava-libraries/wiki/GuavaTermsExplained#symmetric">symmetric</a> <a href="/p/guava-libraries/wiki/GuavaTermsExplained#relation">relation</a>. </p><pre class="prettyprint">Ranges.closed(3, 5).isConnected(Ranges.open(5, 10)); // returns true
Ranges.closed(0, 9).isConnected(Ranges.closed(3, 4)); // returns true
Ranges.closed(0, 5).isConnected(Ranges.closed(3, 9)); // returns true
Ranges.open(3, 5).isConnected(Ranges.open(5, 10)); // returns false
Ranges.closed(1, 5).isConnected(Ranges.closed(6, 10)); // returns false</pre><h3><a name="intersection"></a><tt>intersection</tt><a href="#intersection" class="section_anchor"></a></h3><p><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#intersection(com.google.common.collect.Range)" rel="nofollow"><tt>Range.intersection(Range)</tt></a> returns the maximal range enclosed by both this range and other (which exists iff these ranges are connected), or if no such range exists, throws an <tt>IllegalArgumentException</tt>. </p><p><tt>intersection</tt> is a <a href="/p/guava-libraries/wiki/GuavaTermsExplained#commutative">commutative</a>, <a href="/p/guava-libraries/wiki/GuavaTermsExplained#associative">associative</a> <a href="/p/guava-libraries/wiki/GuavaTermsExplained#binary_operation">operation</a>. </p><pre class="prettyprint">Ranges.closed(3, 5).intersection(Ranges.open(5, 10)); // returns (5, 5]
Ranges.closed(0, 9).intersection(Ranges.closed(3, 4)); // returns [3, 4]
Ranges.closed(0, 5).intersection(Ranges.closed(3, 9)); // returns [3, 5]
Ranges.open(3, 5).intersection(Ranges.open(5, 10)); // throws IAE
Ranges.closed(1, 5).intersection(Ranges.closed(6, 10)); // throws IAE</pre><h3><a name="span"></a><tt>span</tt><a href="#span" class="section_anchor"></a></h3><p><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#span(com.google.common.collect.Range)" rel="nofollow"><tt>Range.span(Range)</tt></a> returns the minimal range that encloses both this range and other.  If the ranges are both connected, this is their union. </p><p><tt>span</tt> is a <a href="/p/guava-libraries/wiki/GuavaTermsExplained#commutative">commutative</a>, <a href="/p/guava-libraries/wiki/GuavaTermsExplained#associative">associative</a>, and <a href="/p/guava-libraries/wiki/GuavaTermsExplained#closed">closed</a> <a href="/p/guava-libraries/wiki/GuavaTermsExplained#binary_operation">operation</a>. </p><pre class="prettyprint">Ranges.closed(3, 5).span(Ranges.open(5, 10)); // returns [3, 10)
Ranges.closed(0, 9).span(Ranges.closed(3, 4)); // returns [0, 9]
Ranges.closed(0, 5).span(Ranges.closed(3, 9)); // returns [0, 9]
Ranges.open(3, 5).span(Ranges.open(5, 10)); // returns (3, 10)
Ranges.closed(1, 5).span(Ranges.closed(6, 10)); // returns [1, 10]</pre><h1><a name="Discrete_Domains"></a>Discrete Domains<a href="#Discrete_Domains" class="section_anchor"></a></h1><p>Some types, but not all Comparable types, are <i>discrete</i>, meaning that ranges bounded on both sides can be enumerated. </p><p>In Guava, a <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/DiscreteDomain.html" rel="nofollow">DiscreteDomain&lt;C&gt;</a> implements discrete operations for type <tt>C</tt>.  A discrete domain always represents the entire set of values of its type; it cannot represent partial domains such as &quot;prime integers&quot;, &quot;strings of length 5,&quot; or &quot;timestamps at midnight.&quot;   </p><p>The <a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/DiscreteDomains.html" rel="nofollow">DiscreteDomains</a> class provides <tt>DiscreteDomain</tt> instances: </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> Type </td><td style="border: 1px solid #ccc; padding: 5px;"> DiscreteDomain </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Integer</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/DiscreteDomains.html#integers()" rel="nofollow"><tt>integers()</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Long</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/DiscreteDomains.html#longs()" rel="nofollow"><tt>longs()</tt></a> </td></tr> </table></p><p>Once you have a <tt>DiscreteDomain</tt>, you can use the following <tt>Range</tt> operations: <ul><li><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#asSet(com.google.common.collect.DiscreteDomain)" rel="nofollow"><tt>asSet(domain)</tt></a>: view a <tt>Range&lt;C&gt;</tt> as an <tt>ImmutableSortedSet&lt;C&gt;</tt>, with a few extra operations thrown in.  (Does not work for unbounded ranges, unless the type itself is bounded.) </li><li><a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Range.html#canonical(com.google.common.collect.DiscreteDomain)" rel="nofollow"><tt>canonical(domain)</tt></a>: put ranges in a &quot;canonical form.&quot;  If <tt>a.asSet(domain).equals(b.asSet(domain))</tt> and <tt>!a.isEmpty()</tt>, then <tt>a.canonical(domain).equals(b.canonical(domain))</tt>.  (This does <i>not</i>, however, imply <tt>a.equals(b)</tt>.) </li></ul></p><pre class="prettyprint">ImmutableSortedSet&lt;Integer&gt; set = Ranges.open(1, 5).asSet(DiscreteDomains.integers());
// set contains [2, 3, 4]

Ranges.greaterThan(0).asSet(DiscreteDomains.integers());
// set contains [1, 2, ..., Integer.MAX_VALUE]</pre><p>Note that <tt>asSet(domain)</tt> does not <i>actually</i> construct the entire range, but instead returns a view of the range as a set. </p><h2><a name="Your_Own_DiscreteDomains"></a>Your Own DiscreteDomains<a href="#Your_Own_DiscreteDomains" class="section_anchor"></a></h2><p>You can make your own <tt>DiscreteDomain</tt> objects, but there are several important aspects of the <tt>DiscreteDomain</tt> contract that you <i>must</i> remember. </p><ul><li>A discrete domain always represents the entire set of values of its type; it cannot represent partial domains such as &quot;prime integers&quot; or &quot;strings of length 5.&quot;  So you cannot, for example, construct a <tt>DiscreteDomain</tt> to view a set of days in a range, with a JODA <tt>DateTime</tt> that includes times up to the second: because this would not contain all elements of the type. </li><li>A <tt>DiscreteDomain</tt> may be infinite -- a <tt>BigInteger</tt> <tt>DiscreteDomain</tt>, for example.  In this case, you should use the default implementation of <tt>minValue()</tt> and <tt>maxValue()</tt>, which throw a <tt>NoSuchElementException</tt>.  This forbids you from using the <tt>asSet(domain)</tt> method on an infinite range, however! </li></ul><h1><a name="What_if_I_need_a_Comparator_?"></a>What if I need a <tt>Comparator</tt>?<a href="#What_if_I_need_a_Comparator_?" class="section_anchor"></a></h1><p>We wanted to strike a very specific balance in <tt>Range</tt> between power and API complexity, and part of that involved not providing a <tt>Comparator</tt>-based interface: we don&#x27;t need to worry about how ranges based on different comparators interact; the API signatures are all significantly simplified; things are just nicer. </p><p>On the other hand, if you think you want an arbitrary <tt>Comparator</tt>, you can do one of the following: </p><ul><li>Use a general <tt>Predicate</tt> and not <tt>Range</tt>.  (Since <tt>Range</tt> implements the <tt>Predicate</tt> interface, you can use <tt>Predicates.compose(range, function)</tt> to get a <tt>Predicate</tt>.) </li><li>Use a wrapper class around your objects that defines the desired ordering. </li></ul>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 <div id="wikicommentcol">
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

<div class="collapse">


 


<div id="commentlist">

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/111852800543889545274/">raymond....@gmail.com</a
>,
 
 </span>
 <span class="date" title="Tue Jan 17 13:17:59 2012">Jan 17, 2012</span>
 <div>
<div class="commentcontent">
<p>Does canonical just intern the range, or is there something deeper going on? </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Tue Jan 17 16:23:13 2012">Jan 17, 2012</span>
 <div>
<div class="commentcontent">
<p>Canonical doesn&#x27;t do any interning at all.  What it does is convert finitely long ranges to the form [a, b), so that ranges that contain the same values have the same canonical representation.  So (0, 1], (0, 2), [1, 2), and [1, 1] all get canonicalized to [1, 2), which is what you&#x27;d want, since they contain the same elements. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/111852800543889545274/">raymond....@gmail.com</a
>,
 
 </span>
 <span class="date" title="Thu Jan 19 09:44:23 2012">Jan 19, 2012</span>
 <div>
<div class="commentcontent">
<p>Ah, of course. I suppose if it interned then you could compare identity rather than equality. Thanks for the (expanded) explanation. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/111852800543889545274/">raymond....@gmail.com</a
>,
 
 </span>
 <span class="date" title="Thu Jan 19 09:45:00 2012">Jan 19, 2012</span>
 <div>
<div class="commentcontent">
<p>I also notice what I presume to be a typo: &quot;Note that asSet(domain) does actually construct the entire range, but instead returns a view of the range as a set.&quot; Was there a &quot;not&quot; intended to precede &quot;actually&quot; </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Thu Jan 19 11:30:46 2012">Jan 19, 2012</span>
 <div>
<div class="commentcontent">
<p>Indeed. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/113933056988273384675/">holo...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Wed Feb 15 11:32:33 2012">Feb 15, 2012</span>
 <div>
<div class="commentcontent">
<p>Under &quot;intersection&quot;, the last example should be intersection, not isConnected. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/108138777494188800987/">avay...@google.com</a
>,
 
 </span>
 <span class="date" title="Wed May  2 07:55:58 2012">May 2, 2012</span>
 <div>
<div class="commentcontent">
<pre class="prettyprint">Ranges.closed(3, 5).intersection(Ranges.open(5, 10)); // returns (5, 5]</pre><p>Isn&#x27;t it wrong? (5, 10) doesn&#x27;t include 5 so why does it intersect with [3, 5] and what&#x27;s (5, 5]?  </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Tue May  8 08:03:31 2012">May 8, 2012</span>
 <div>
<div class="commentcontent">
<p>@avayvod: &quot;[a..a); (a..a] : empty, but valid&quot; </p><p>(5, 5] is an empty range: it contains nothing.  intersection throws an exception if its input ranges are not connected, and [3, 5] and (5, 10) are connected. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/117679010609155180272/">j...@nwsnet.de</a
>,
 
 </span>
 <span class="date" title="Tue Jun  5 08:29:14 2012">Jun 5, 2012</span>
 <div>
<div class="commentcontent">
<p>&gt; So you cannot, for example, construct a DiscreteDomain<a href="/p/guava-libraries/w/edit/DiscreteDomain">?</a> to view a set of days in a range, with a JODA DateTime<a href="/p/guava-libraries/w/edit/DateTime">?</a> that includes times up to the second: because this would not contain all elements of the type. </p><p>Just to be clear, because I might implement it: Would that work with Joda time&#x27;s <tt>LocalDate</tt>, or are there similar issues? </p><p>----8&lt;------ </p><p>Only slightly related: There&#x27;s a typo in &quot;In this case, you should <i>ues</i> the default implementation […]&quot;. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Jun 11 09:45:27 2012">Jun 11, 2012</span>
 <div>
<div class="commentcontent">
<p>I believe <tt>LocalDate</tt> would encounter similar issues.  It <i>must</i> be the case that if <tt>domain.next(a)</tt> returns <tt>b</tt>, then there is no <tt>c</tt> of the same type satisfying <tt>a.compareTo(c) &lt; 0 &amp;&amp; c.compareTo(b) &lt; 0</tt>. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/117679010609155180272/">j...@nwsnet.de</a
>,
 
 </span>
 <span class="date" title="Tue Jun 12 06:37:10 2012">Jun 12, 2012</span>
 <div>
<div class="commentcontent">
<p>Louis, </p><p>my implementation is as follows: </p><pre class="prettyprint">import com.google.common.collect.DiscreteDomain;
import org.joda.time.Days;
import org.joda.time.LocalDate;

/**
 * A discrete domain for local date values.
 */
public final class LocalDateDomain extends DiscreteDomain&lt;LocalDate&gt; {

  private static final LocalDateDomain INSTANCE = new LocalDateDomain();

  public static DiscreteDomain&lt;LocalDate&gt; getInstance() {
    return INSTANCE;
  }

  private LocalDateDomain() {
  }

  @Override
  public long distance(LocalDate start, LocalDate end) {
    return Days.daysBetween(start, end).getDays();
  }

  @Override
  public LocalDate next(LocalDate value) {
    return value.plusDays(1);
  }

  @Override
  public LocalDate previous(LocalDate value) {
    return value.minusDays(1);
  }
}</pre><p>I did some tests and I think that the requirement you stated above holds true. E.g. if <tt>a</tt> is &quot;2012-06-12&quot; and <tt>b</tt> is &quot;2012-06-13&quot;, then there can be no <tt>c</tt> in between. </p><p>Am I missing something or do you agree that I can consider the above class to be correct? </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Sat Jun 23 09:05:53 2012">Jun 23, 2012</span>
 <div>
<div class="commentcontent">
<p>@yo.gi, that&#x27;s not valid.  Specifically, all elements of the type have to satisfy the guarantee -- not only values produced by the DiscreteDomain<a href="/p/guava-libraries/w/edit/DiscreteDomain">?</a>.  So there can be LocalDates<a href="/p/guava-libraries/w/edit/LocalDates">?</a> in between two days.  It isn&#x27;t enough for the DiscreteDomain<a href="/p/guava-libraries/w/edit/DiscreteDomain">?</a> to say that their distance is 0; they must also compare as equal. </p><p>You could create a DiscreteDomain<a href="/p/guava-libraries/w/edit/DiscreteDomain">?</a>&lt;DateMidnight&gt;, except for the minor issue of timezones. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/117679010609155180272/">j...@nwsnet.de</a
>,
 
 </span>
 <span class="date" title="Mon Jun 25 04:19:13 2012">Jun 25, 2012</span>
 <div>
<div class="commentcontent">
<p>I guess it&#x27;s the <tt>Chronology</tt> argument/field that makes <tt>LocalDate</tt> instances different. Bummer. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Jul  2 06:54:56 2012">Jul 2, 2012</span>
 <div>
<div class="commentcontent">
<p>Yeah.  Basically...don&#x27;t use Range for date/time stuff, because that&#x27;s so monstrously complicated that you should only use truly dedicated libraries like JODA. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/100178097488005807020/">paul.dil...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon Jul 16 22:37:29 2012">Jul 16, 2012</span>
 <div>
<div class="commentcontent">
<p>Why do you recommend against Range for date/time stuff?  I understand that it&#x27;s not a discrete domain, but does that matter? </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/100178097488005807020/">paul.dil...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon Jul 16 22:52:17 2012">Jul 16, 2012</span>
 <div>
<div class="commentcontent">
<p>Why are ranges restricted to being in ascending order? </p><p>I have previously found it extremely useful to also have ascending/descending info in my Range class.  For example, a query such as &quot;get all records where date is [2013-01-01 .. 2012-01-01]&quot; could return results ordered from youngest to oldest. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Sun Jul 29 08:42:01 2012">Jul 29, 2012</span>
 <div>
<div class="commentcontent">
<p>&quot;Why do you recommend against Range for date/time stuff?&quot; You can probably get away with using Range with JODA, but JODA already has the much more specific, more carefully implemented Interval type. </p><p>&quot;Why are ranges restricted to being in ascending order?&quot; No Range implementation we could&#x27;ve provided would address 100% of use cases.  Our goal was a simple, unsurprising Range class without unexpected edge cases, and I think that&#x27;s worked out -- I can certainly think of several projects I&#x27;ve done with Range that would have been made much more complicated with &quot;descending Ranges.&quot; </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/117679010609155180272/">j...@nwsnet.de</a
>,
 
 </span>
 <span class="date" title="Mon Jul 30 00:49:56 2012">Jul 30, 2012</span>
 <div>
<div class="commentcontent">
<p>Louis: While Joda time&#x27;s <tt>Interval</tt> class works well, it is limited to date/time objects with time zone. However, there is no equivalent for just dates, or objects without time zone, or both. That&#x27;s why I created the class above. </p><p>While both <tt>Interval</tt> and <tt>Range</tt> can do overlap/intersection, <tt>Range</tt> has <tt>span</tt>, too. </p><p>What both lack is a way to &quot;cut out&quot; an interval/range out of another one, resulting in no, one, or multiple new objects. For example, remove the weekends from a range of days, or remove the holidays (which must not be represented as days, but rather any date/time spans) from a range of (week)days. </p><p>What I&#x27;m basically wondering about is if all this is better suited in Guava&#x27;s generic <tt>Range</tt> or should be added to Joda time (though I&#x27;m uncertain about the latter with regard to the changes that the planned integration into Java 8 will bring). </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/oxyg3n8@gmail.com/">oxyg3n8@gmail.com</a
>,
 
 </span>
 <span class="date" title="Tue Sep 11 07:12:29 2012">Sep 11, 2012</span>
 <div>
<div class="commentcontent">
<p>This could be use as example of how to handle ranges like [1..5,7,8,9..20], it was implemented with a custom binary search and has methods for add and remove elements, it will collapse, expand ranges if necessary: </p><pre class="prettyprint">
import com.google.common.collect.DiscreteDomains;
import com.google.common.collect.Lists;
import com.google.common.collect.Range;
import com.google.common.collect.Ranges;

import java.util.Collection;
import java.util.List;

public class IntRangeCollection
{
  private List&lt;Range&lt;Integer&gt;&gt; rangeList=Lists.newArrayListWithExpectedSize(1000);

  public boolean addElements(final Collection&lt;Integer&gt; elements)
  {
    boolean modified=false;
    for(Integer element : elements){
      modified=addElement(element) || modified;
    }
    return modified;
  }

  public boolean removeElements(final Collection&lt;Integer&gt; elements)
  {
    boolean modified=false;
    for(Integer element : elements){
      modified=removeElement(element) || modified;
    }
    return modified;
  }

  public boolean addElement(final Integer element)
  {
    final Range&lt;Integer&gt; elementRange=Ranges.singleton(element);
    if(rangeList.isEmpty()){
      rangeList.add(elementRange);
    } else{
      int
              start=0, mid=0,
              end=rangeList.size() - 1;
      Range&lt;Integer&gt; midRange=null;
      while(start&lt;=end){
        mid=(start + end) / 2;
        midRange=rangeList.get(mid);
        if(midRange.contains(element)){
          return false;
        } else if(testLinkable(midRange, element)){
          rangeList.set(mid, midRange.span(elementRange));
          midRange=rangeList.get(mid);
          if(mid&gt;0){
            final Range&lt;Integer&gt; a=rangeList.get(mid - 1);
            if(testLinkable(a, midRange)){
              rangeList.set(mid - 1, a.span(midRange));
              rangeList.remove(mid);
              mid--;
            }
          }
          if(mid&lt;rangeList.size() - 1){
            final Range&lt;Integer&gt; b=rangeList.get(mid + 1);
            if(testLinkable(midRange, b)){
              rangeList.set(mid, midRange.span(b));
              rangeList.remove(mid + 1);
            }
          }
          return true;
        } else if(midRange.lowerEndpoint().compareTo(element)&lt;0){
          start=mid + 1;
        } else{
          end=mid - 1;
        }
      }
      //noinspection ConstantConditions
      rangeList.add(midRange.lowerEndpoint().compareTo(element)&lt;0 ? mid + 1 : mid, elementRange);
    }
    return true;
  }

  public boolean removeElement(final Integer element)
  {
    final Range&lt;Integer&gt; elementRange=Ranges.singleton(element);
    if(rangeList.isEmpty()){
      rangeList.add(elementRange);
    } else{
      int
              start=0, mid,
              end=rangeList.size() - 1;
      Range&lt;Integer&gt; midRange=null;
      while(start&lt;=end){
        mid=(start + end) / 2;
        midRange=rangeList.get(mid);
        if(midRange.contains(element)){
          final Integer
                  lower=midRange.lowerEndpoint(),
                  upper=midRange.upperEndpoint();
          rangeList.remove(mid);
          if(!lower.equals(upper)){
            rangeList.add(mid, Ranges.closed(element + 1, upper));
            rangeList.add(mid, Ranges.closed(lower, element - 1));
          }
          return true;
        } else if(midRange.lowerEndpoint().compareTo(element)&lt;0){
          start=mid + 1;
        } else{
          end=mid - 1;
        }
      }
    }
    return false;
  }

  public List&lt;Integer&gt; getIntegers()
  {
    final List&lt;Integer&gt; result=Lists.newArrayListWithExpectedSize(50000);
    for(Range&lt;Integer&gt; range : rangeList){
      result.addAll(range.asSet(DiscreteDomains.integers()));
    }
    return result;
  }

  private boolean testLinkable(final Range&lt;Integer&gt; range, final Integer element)
  {
    return Ranges.closed(range.lowerEndpoint() - 1, range.upperEndpoint() + 1).contains(element);
  }

  private boolean testLinkable(final Range&lt;Integer&gt; a, final Range&lt;Integer&gt; b)
  {
    return Ranges.closed(a.lowerEndpoint() - 1, a.upperEndpoint() + 1).isConnected(b);
  }

  @Override
  public String toString()
  {
    return &quot;IntRangeCollection{&quot; +
            &quot;rangeList=&quot; + rangeList +
            //&quot;, integers=&quot; + getIntegers() +
            &#x27;}&#x27;;
  }

  public static void main(String[] args)
  {
    final int MAX_NUMBER=2000000;
    final List&lt;Integer&gt; list=Lists.newArrayListWithCapacity(MAX_NUMBER);
    for(int i=0; i&lt;MAX_NUMBER; i++){
      //noinspection UnsecureRandomNumberGeneration
      list.add((int) (Math.random() * (MAX_NUMBER / 4)));
    }
    System.out.println(&quot;Done creating list&quot;);
    IntRangeCollection ranges=new IntRangeCollection();
    final long startMillis=System.currentTimeMillis();
    ranges.addElements(list);
    System.out.println(MAX_NUMBER + &quot; contained in &quot; + ranges.rangeList.size() + &quot; ranges done in &quot; + (System.currentTimeMillis() - startMillis) + &quot;ms&quot;);
    System.out.println(ranges);
  }

}
</pre>
</div>
 
 
 </div>
 </div>
 

</div>
</div>

 


 <script type="text/javascript">
 function delComment(sequence_num, create_time, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.create_time.value = create_time;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 </div>
 
 
 
 
 <br>
 <div class="artifactcomment">
 <span class="indicator">&#9658;</span> <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FRangesExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FRangesExplained"
 >Sign in</a> to add a comment
 </div>
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="RangesExplained" >
 <input type="hidden" name="token" value="" >
 </form>


 <script src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_core.js"></script>
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


