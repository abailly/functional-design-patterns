
 



 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="http://code.google.com/p/guava-libraries/wiki/ReflectionExplained" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"profileUrl":null,"token":null,"assetHostPath":"http://www.gstatic.com/codesite/ph","domainName":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/17134919371905794448","projectHomeUrl":"/p/guava-libraries","relativeBaseUrl":"","projectName":"guava-libraries","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>ReflectionExplained - 
 guava-libraries -
 
 Guava's new reflection utilities, explained. - 
 Guava: Google Core Libraries for Java 1.6+ - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/guava-libraries/gitchanges/basic?repo=wiki&amp;path=/ReflectionExplained.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FReflectionExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FReflectionExplained" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/guava-libraries">
 <a href="/p/guava-libraries/">
 
 <img src="http://www.gstatic.com/codesite/ph/images/search-48.gif" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/guava-libraries/"><span itemprop="name">guava-libraries</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/guava-libraries/"><span itemprop="description">Guava: Google Core Libraries for Java 1.6+</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/guava-libraries/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/guava-libraries/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/guava-libraries/wiki/GuavaExplained?tm=6" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/guava-libraries/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/guava-libraries/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/guava-libraries/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
 
 style="padding:0 3px 3px 0; margin:0"
 
 
>

 






 
<style type="text/css">
 #wikimaincol { padding-top: 6px; padding-left:1em}
 #sidebarcontainer {
 padding: 1.5em 2px 2px 2px;
 min-width: 15em;
 max-width: 20em;
 overflow:hidden;
}
 .sidebartop ul { margin:0 0 0 .5em; padding-left:0 !important; list-style:none}
 .sidebartop ul ul { margin-left:1em; padding-left:0; list-style:none; display:none}
 .sidebartop li { margin:0 0 2px 0; padding:1px; padding-left:14px; cursor:pointer}
 .sidebartop li a { padding:2px}
 .sidebartop li { background: url(http://www.gstatic.com/codesite/ph/images/plus.gif) no-repeat 1px 3px}
 .sidebartop li.treeopen { background: url(http://www.gstatic.com/codesite/ph/images/minus.gif) no-repeat 1px 3px}
 .sidebartop li.treeleaf { background:none}
 .currentpagelink { 
 font-weight: bold;
 text-decoration: none;
 color: black !important; 
 background: #c3d9ff;
 }
 .sidebartop ul.treeleafcontainer { display:block;}
 .sidebarcontent { 
 vertical-align:top;
 padding-right: 3px;
 border-right: 2px solid #ccc;
 }
</style>



 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td class="sidebarcontent">
 <div class="vt expand" id="wikisidebar">
 <div>
 
 <div style="float:right;">
 <a class="ifExpand" style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Hide sidebar"><b>&lsaquo;&lsaquo;</b></a>
 </div>
 <div class="ifCollapse" style="padding:0 2px">
 <a style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Show sidebar"><b>&rsaquo;&rsaquo;</b></a>
 </div>
 
 
 <div id="sidebarcontainer" class="sidebartop ifExpand">
 <ul><li><a href="/p/guava-libraries/wiki/GuavaExplained">Introduction</a> </li><li>Basic Utilities </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Using/avoiding null</a> </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained#Optional">Optional</a> </li></ul><li><a href="/p/guava-libraries/wiki/PreconditionsExplained">Preconditions</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained">Ordering</a> </li><ul><li><a href="/p/guava-libraries/wiki/OrderingExplained#Creation">Creation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Manipulation">Manipulation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Application">Application</a> </li></ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained">Object methods</a> </li><ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#equals">equals</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#hashCode">hashCode</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#toString">toString</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#compare/compareTo">compare/compareTo</a> </li></ul><li><a href="/p/guava-libraries/wiki/ThrowablesExplained">Throwables</a> </li></ul><li>Collections </li><ul><li><a href="/p/guava-libraries/wiki/ImmutableCollectionsExplained">Immutable collections</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained">New collection types</a> </li><ul><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multiset">Multiset</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multimap">Multimap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#BiMap">BiMap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Table">Table</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#ClassToInstanceMap">ClassToInstanceMap</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained">Utility Classes</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Iterables">Iterables</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Lists">Lists</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Sets">Sets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Maps">Maps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multisets">Multisets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multimaps">Multimaps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Tables">Tables</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained">Extension Utilities</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#Forwarding_Decorators">Forwarding Decorators</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#PeekingIterator">PeekingIterator</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#AbstractIterator">AbstractIterator</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/CachesExplained">Caches</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Applicability">Applicability</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Population">Population</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Eviction">Eviction</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Removal_Listeners">Removal Listeners</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Refresh">Refresh</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Timed_Eviction">Timed Eviction</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Size-based_Eviction">Size Caps</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Reference-based_Eviction">Garbage Collection</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Explicit_Removals">Explicit Removals</a> </li></ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Features">Features</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Statistics">Statistics</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained">Functional Idioms</a> </li><ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions_and_Predicates">Obtaining</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Predicates">Using Predicates</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions">Using Functions</a> </li></ul><li>Concurrency </li><ul><li><a href="/p/guava-libraries/wiki/ListenableFutureExplained">ListenableFuture</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained">Service</a> </li><ul><li><a href="/p/guava-libraries/wiki/ServiceExplained#Using_a_Service">Using</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained#Implementations">Implementations</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/StringsExplained">Strings</a> </li><ul><li><a href="/p/guava-libraries/wiki/StringsExplained#Joiner">Joiner</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Splitter">Splitter</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#CharMatcher">CharMatcher</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Charsets">Charsets</a> </li></ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained">Primitives</a> </li><ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Primitive_array_utilities">Primitive arrays</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#General_utility_methods">General utilities</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Byte_conversion_methods">Byte conversion</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Unsigned_support">Unsigned support</a> </li></ul><li><a href="/p/guava-libraries/wiki/RangesExplained">Ranges</a> </li><ul><li><a href="/p/guava-libraries/wiki/RangesExplained#Building_Ranges">Building</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Operations">Operations</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Discrete_Domains">Discrete Domains</a> </li></ul><li><a href="/p/guava-libraries/wiki/IOExplained">I/O</a> </li><li><a href="/p/guava-libraries/wiki/HashingExplained">Hashing</a> </li><ul><li><a href="/p/guava-libraries/wiki/HashingExplained#BloomFilter">BloomFilter</a> </li></ul><li><a href="/p/guava-libraries/wiki/EventBusExplained">EventBus</a> </li><li><a href="/p/guava-libraries/wiki/MathExplained">Math</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Math_on_Integral_Types">Integral</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Checked_Arithmetic">Overflow Checking</a> </li></ul><li><a href="/p/guava-libraries/wiki/MathExplained#Floating-point_arithmetic">Floating Point</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained">Reflection</a> </li><ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained#TypeToken">TypeToken</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReleaseHistory">Releases</a> </li><ul><li><a href="/p/guava-libraries/wiki/Release13">Release 13</a> </li><li><a href="/p/guava-libraries/wiki/Release12">Release 12</a> </li><li><a href="/p/guava-libraries/wiki/Release11">Release 11</a> </li><li><a href="/p/guava-libraries/wiki/Release10">Release 10</a> </li></ul><li>Tips </li><ul><li><a href="/p/guava-libraries/wiki/PhilosophyExplained">Philosophy</a> </li><li><a href="/p/guava-libraries/wiki/UseGuavaInYourBuild">Building with Guava</a> </li><li><a href="/p/guava-libraries/wiki/UsingProGuardWithGuava">Shrinking JARs with ProGuard</a> </li><li><a href="/p/guava-libraries/wiki/ApacheCommonCollectionsEquivalents">Translating from Apache Commons</a> </li><li><a href="/p/guava-libraries/wiki/Compatibility">Guava and Compatibility</a> </li><li><a href="/p/guava-libraries/wiki/IdeaGraveyard">Idea Graveyard</a> </li><li><a href="/p/guava-libraries/wiki/FriendsOfGuava">Friends of Guava</a> </li><li><a href="/p/guava-libraries/wiki/HowToContribute">How to Contribute</a> </li></ul><li><a href="/p/guava-libraries/wiki/GuavaTermsExplained">Glossary</a> </li><li><a href="http://groups.google.com/group/guava-discuss" rel="nofollow">Mailing List</a> </li><li><a href="http://stackoverflow.com/questions/tagged/guava" rel="nofollow">Stack Overflow</a> </li><li><a href="http://code.google.com/p/memory-measurer/wiki/ElementCostInDataStructures" rel="nofollow">Footprint of JDK/Guava data structures</a> </li></ul>
 </div>
 </div>
</div>

 </td>
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">ReflectionExplained</span>
 &nbsp;
 <div> 
 
 <i>Guava's new reflection utilities, explained.</i>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Sun Jul 29 08:43:32 2012">
 Jul 29, 2012</span>
 
 by 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <p><i>Note:</i> These features are part of the 12.0 release. </p><p>TODO: links, once the Javadoc appears </p><h1><a name="TypeToken"></a><tt>TypeToken</tt><a href="#TypeToken" class="section_anchor"></a></h1><p>Due to type erasure, you can&#x27;t pass around generic <tt>Class</tt> objects at runtime -- you might be able to cast them and pretend they&#x27;re generic, but they really aren&#x27;t. </p><p>For example: </p><pre class="prettyprint">ArrayList&lt;String&gt; stringList = Lists.newArrayList();
ArrayList&lt;Integer&gt; intList = Lists.newArrayList();
System.out.println(stringList.getClass().isAssignableFrom(intList.getClass()));
  // returns true, even though ArrayList&lt;String&gt; is not assignable from ArrayList&lt;Integer&gt;</pre><p><strong>Guava provides <tt>TypeToken</tt>, which uses reflection-based tricks to allow you to manipulate and query generic types, even at runtime.</strong>  Think of a <tt>TypeToken</tt> as a way of creating, manipulating, and querying <tt>Type</tt> (and, implicitly <tt>Class</tt>) objects in a way that respects generics. </p><p>Note to Guice users: <tt>TypeToken</tt> is similar to <a href="http://code.google.com/p/google-guice/" rel="nofollow">Guice</a>&#x27;s <a href="http://google-guice.googlecode.com/git/javadoc/com/google/inject/TypeLiteral.html" rel="nofollow"><tt>TypeLiteral</tt></a> class, but with one important difference: it supports non-reified types such as <tt>T</tt>, <tt>List&lt;T&gt;</tt> or even <tt>List&lt;? extends Number&gt;</tt>; while <tt>TypeLiteral</tt> does not. <tt>TypeToken</tt> is also serializable and offers numerous additional utility methods. </p><h3><a name="Background:_Type_Erasure_and_Reflection"></a>Background: Type Erasure and Reflection<a href="#Background:_Type_Erasure_and_Reflection" class="section_anchor"></a></h3><p>Java doesn&#x27;t retain generic type information for <i>objects</i> at runtime.  If you have an <tt>ArrayList&lt;String&gt;</tt> object at runtime, you cannot determine that it had the generic type <tt>ArrayList&lt;String&gt;</tt> -- and you can, with unsafe raw types, cast it to <tt>ArrayList&lt;Object&gt;</tt>. </p><p>However, reflection allows you to detect the generic types of methods and classes.  If you implement a method that returns a <tt>List&lt;String&gt;</tt>, and you use reflection to obtain the return type of that method, you get back a <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/ParameterizedType.html" rel="nofollow"><tt>ParameterizedType</tt></a> representing <tt>List&lt;String&gt;</tt>. </p><p>The <tt>TypeToken</tt> class uses this workaround to allow the manipulation of generic types with a minimum of syntactic overhead. </p><h3><a name="Introduction"></a>Introduction<a href="#Introduction" class="section_anchor"></a></h3><p>Obtaining a <tt>TypeToken</tt> for a basic, raw class is as simple as </p><pre class="prettyprint">TypeToken&lt;String&gt; stringTok = TypeToken.of(String.class);
TypeToken&lt;Integer&gt; intTok = TypeToken.of(Integer.class);</pre><p>To obtain a <tt>TypeToken</tt> for a type with generics -- when you know the generic type arguments at compile time -- you use an empty anonymous inner class: </p><pre class="prettyprint">TypeToken&lt;List&lt;String&gt;&gt; stringListTok = new TypeToken&lt;List&lt;String&gt;&gt;() {};</pre><p>Or if you want to deliberately refer to a wildcard type: </p><pre class="prettyprint">TypeToken&lt;Map&lt;?, ?&gt;&gt; wildMapTok = new TypeToken&lt;Map&lt;?, ?&gt;&gt;() {};</pre><p><tt>TypeToken</tt> provides a way to dynamically resolve generic type arguments, like this: </p><pre class="prettyprint">static &lt;K, V&gt; TypeToken&lt;Map&lt;K, V&gt;&gt; mapToken(TypeToken&lt;K&gt; keyToken, TypeToken&lt;V&gt; valueToken) {
  return new TypeToken&lt;Map&lt;K, V&gt;&gt;() {}
    .where(new TypeParameter&lt;K&gt;() {}, keyToken)
    .where(new TypeParameter&lt;V&gt;() {}, valueToken);
}
...
TypeToken&lt;Map&lt;String, BigInteger&gt;&gt; mapToken = mapToken(
   TypeToken.of(String.class),
   TypeToken.of(BigInteger.class));
TypeToken&lt;Map&lt;Integer, Queue&lt;String&gt;&gt;&gt; complexToken = mapToken(
   TypeToken.of(Integer.class),
   new TypeToken&lt;Queue&lt;String&gt;&gt;() {});</pre><p>Note that if <tt>mapToken</tt> just returned <tt>new TypeToken&lt;Map&lt;K, V&gt;&gt;()</tt>, it could not actually reify the types assigned to <tt>K</tt> and <tt>V</tt>, so for example </p><pre class="prettyprint">class Util {
  static &lt;K, V&gt; TypeToken&lt;Map&lt;K, V&gt;&gt; incorrectMapToken() {
    return new TypeToken&lt;Map&lt;K, V&gt;&gt;() {};
  }
}

System.out.println(Util.&lt;String, BigInteger&gt;incorrectMapToken());
// just prints out &quot;java.util.Map&lt;K, V&gt;&quot;</pre><p>Alternately, you can capture a generic type with a (usually anonymous) subclass and resolve it against a context class that knows what the type parameters are. </p><pre class="prettyprint">abstract class IKnowMyType&lt;T&gt; {
  TypeToken&lt;T&gt; type = new TypeToken&lt;T&gt;(getClass()) {};
}
...
new IKnowMyType&lt;String&gt;() {}.type; // returns a correct TypeToken&lt;String&gt;</pre><p>With this technique, you can, for example, get classes that know their element types. </p><h2><a name="Queries"></a>Queries<a href="#Queries" class="section_anchor"></a></h2><p><tt>TypeToken</tt> supports many of the queries supported by <tt>Class</tt>, but with generic constraints properly taken into account. </p><p>Supported query operations include: </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> Method </td><td style="border: 1px solid #ccc; padding: 5px;"> Description </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Class&lt;? super T&gt; getRawType()</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns the most-known runtime class. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>TypeToken&lt;? extends T&gt; getSubtype(Class&lt;?&gt;)</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns some subtype of <tt>this</tt> that has the specified raw class.  For example, if this is <tt>Iterable&lt;String&gt;</tt> and the argument is <tt>List.class</tt>, the result will be <tt>List&lt;String&gt;</tt>. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>TypeToken&lt;? super T&gt; getSupertype(Class&lt;?&gt;)</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Generifies the specified raw class to be a supertype of this type.  For example, if this is <tt>Set&lt;String&gt;</tt> and the argument is <tt>Iterable.class</tt>, the result will be <tt>Iterable&lt;String&gt;</tt>. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>isAssignableFrom(TypeToken&lt;?&gt;)</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns <tt>true</tt> if this type is assignable from the given type, taking into account generic parameters. <tt>List&lt;? extends Number&gt;</tt> is assignable from <tt>List&lt;Integer&gt;</tt>, but <tt>List&lt;String&gt;</tt> is not. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>isAssignableFrom(Type)</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns <tt>true</tt> if this type is assignable from the given type, taking into account generic parameters. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Set&lt;TypeToken&lt;? super T&gt;&gt; getTypes()</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns the set of all classes and interfaces that this type is or is a subtype of.  The returned <tt>Set</tt> also provides methods <tt>classes()</tt> and <tt>interfaces()</tt> to let you view only the superclasses and superinterfaces. </td></tr> </table></p><h3><a name="resolveType"></a><tt>resolveType</tt><a href="#resolveType" class="section_anchor"></a></h3><p><tt>resolveType</tt> is a powerful but complex query operation that can be used to &quot;substitute&quot; type arguments from the context token.  For example, </p><pre class="prettyprint">TypeToken&lt;Function&lt;Integer, String&gt;&gt; funToken = new TypeToken&lt;Function&lt;Integer, String&gt;&gt;() {};

TypeToken&lt;?&gt; funResultToken = funToken.resolveType(Function.class.getTypeParameters()[1]));
  // returns a TypeToken&lt;String&gt;</pre><p><tt>TypeToken</tt> unifies the <tt>TypeVariable</tt>s provided by Java with the values of those type variables from the &quot;context&quot; token.  This can be used to generically deduce the return types of methods on a type: </p><pre class="prettyprint">TypeToken&lt;Map&lt;String, Integer&gt;&gt; mapToken = new TypeToken&lt;Map&lt;String, Integer&gt;&gt;() {};
TypeToken&lt;?&gt; entrySetToken = mapToken.resolveType(Map.class.getMethod(&quot;entrySet&quot;).getGenericReturnType());
  // returns a TypeToken&lt;Set&lt;Map.Entry&lt;String, Integer&gt;&gt;&gt;</pre><h1><a name="Class_Loading"></a>Class Loading<a href="#Class_Loading" class="section_anchor"></a></h1><p>The utility method <tt>Reflection.initialize(Class...)</tt> ensures that the specified classes are initialized -- for example, any static initialization is performed. </p><p>The use of this method is a code smell, because static state hurts system maintainability and testability. In cases when you have no choice while inter-operating with a legacy framework, this method helps to keep the code less ugly. </p><h1><a name="Proxy_Helpers"></a>Proxy Helpers<a href="#Proxy_Helpers" class="section_anchor"></a></h1><p>TODO </p>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 <div id="wikicommentcol">
 


 
 
 

<div class="collapse">


 


<div id="commentlist">

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/110565733650344223279/">bertjanb...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Wed Jul 11 07:14:54 2012">Jul 11, 2012</span>
 <div>
<div class="commentcontent">
<p>Shouldn&#x27;t it be TypeToken<a href="/p/guava-libraries/w/edit/TypeToken">?</a>&lt;Map&lt;?, ?&gt;&gt; wildMapTok = new TypeToken<a href="/p/guava-libraries/w/edit/TypeToken">?</a>&lt;Map&lt;?, ?&gt;&gt;() {}; instead of TypeToken<a href="/p/guava-libraries/w/edit/TypeToken">?</a>&lt;Map&lt;?, ?&gt;&gt; wildMapTok = new TypeToken<a href="/p/guava-libraries/w/edit/TypeToken">?</a>&lt;Map&lt;?, ?&gt;&gt;(); ? </p>
</div>
 
 
 </div>
 </div>
 

</div>
</div>

 


 <script type="text/javascript">
 function delComment(sequence_num, create_time, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.create_time.value = create_time;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 </div>
 
 
 
 
 <br>
 <div class="artifactcomment">
 <span class="indicator">&#9658;</span> <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FReflectionExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FReflectionExplained"
 >Sign in</a> to add a comment
 </div>
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="ReflectionExplained" >
 <input type="hidden" name="token" value="" >
 </form>


 <script src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_core.js"></script>
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


