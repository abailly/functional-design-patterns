
 



 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="http://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"profileUrl":null,"token":null,"assetHostPath":"http://www.gstatic.com/codesite/ph","domainName":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/17134919371905794448","projectHomeUrl":"/p/guava-libraries","relativeBaseUrl":"","projectName":"guava-libraries","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>UsingAndAvoidingNullExplained - 
 guava-libraries -
 
 Guava tools to use and avoid the use of null, explained. - 
 Guava: Google Core Libraries for Java 1.6+ - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/guava-libraries/gitchanges/basic?repo=wiki&amp;path=/UsingAndAvoidingNullExplained.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FUsingAndAvoidingNullExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FUsingAndAvoidingNullExplained" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/guava-libraries">
 <a href="/p/guava-libraries/">
 
 <img src="http://www.gstatic.com/codesite/ph/images/search-48.gif" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/guava-libraries/"><span itemprop="name">guava-libraries</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/guava-libraries/"><span itemprop="description">Guava: Google Core Libraries for Java 1.6+</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/guava-libraries/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/guava-libraries/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/guava-libraries/wiki/GuavaExplained?tm=6" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/guava-libraries/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/guava-libraries/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/guava-libraries/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
 
 style="padding:0 3px 3px 0; margin:0"
 
 
>

 






 
<style type="text/css">
 #wikimaincol { padding-top: 6px; padding-left:1em}
 #sidebarcontainer {
 padding: 1.5em 2px 2px 2px;
 min-width: 15em;
 max-width: 20em;
 overflow:hidden;
}
 .sidebartop ul { margin:0 0 0 .5em; padding-left:0 !important; list-style:none}
 .sidebartop ul ul { margin-left:1em; padding-left:0; list-style:none; display:none}
 .sidebartop li { margin:0 0 2px 0; padding:1px; padding-left:14px; cursor:pointer}
 .sidebartop li a { padding:2px}
 .sidebartop li { background: url(http://www.gstatic.com/codesite/ph/images/plus.gif) no-repeat 1px 3px}
 .sidebartop li.treeopen { background: url(http://www.gstatic.com/codesite/ph/images/minus.gif) no-repeat 1px 3px}
 .sidebartop li.treeleaf { background:none}
 .currentpagelink { 
 font-weight: bold;
 text-decoration: none;
 color: black !important; 
 background: #c3d9ff;
 }
 .sidebartop ul.treeleafcontainer { display:block;}
 .sidebarcontent { 
 vertical-align:top;
 padding-right: 3px;
 border-right: 2px solid #ccc;
 }
</style>



 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td class="sidebarcontent">
 <div class="vt expand" id="wikisidebar">
 <div>
 
 <div style="float:right;">
 <a class="ifExpand" style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Hide sidebar"><b>&lsaquo;&lsaquo;</b></a>
 </div>
 <div class="ifCollapse" style="padding:0 2px">
 <a style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Show sidebar"><b>&rsaquo;&rsaquo;</b></a>
 </div>
 
 
 <div id="sidebarcontainer" class="sidebartop ifExpand">
 <ul><li><a href="/p/guava-libraries/wiki/GuavaExplained">Introduction</a> </li><li>Basic Utilities </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Using/avoiding null</a> </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained#Optional">Optional</a> </li></ul><li><a href="/p/guava-libraries/wiki/PreconditionsExplained">Preconditions</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained">Ordering</a> </li><ul><li><a href="/p/guava-libraries/wiki/OrderingExplained#Creation">Creation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Manipulation">Manipulation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Application">Application</a> </li></ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained">Object methods</a> </li><ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#equals">equals</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#hashCode">hashCode</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#toString">toString</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#compare/compareTo">compare/compareTo</a> </li></ul><li><a href="/p/guava-libraries/wiki/ThrowablesExplained">Throwables</a> </li></ul><li>Collections </li><ul><li><a href="/p/guava-libraries/wiki/ImmutableCollectionsExplained">Immutable collections</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained">New collection types</a> </li><ul><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multiset">Multiset</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multimap">Multimap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#BiMap">BiMap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Table">Table</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#ClassToInstanceMap">ClassToInstanceMap</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained">Utility Classes</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Iterables">Iterables</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Lists">Lists</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Sets">Sets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Maps">Maps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multisets">Multisets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multimaps">Multimaps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Tables">Tables</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained">Extension Utilities</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#Forwarding_Decorators">Forwarding Decorators</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#PeekingIterator">PeekingIterator</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#AbstractIterator">AbstractIterator</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/CachesExplained">Caches</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Applicability">Applicability</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Population">Population</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Eviction">Eviction</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Removal_Listeners">Removal Listeners</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Refresh">Refresh</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Timed_Eviction">Timed Eviction</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Size-based_Eviction">Size Caps</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Reference-based_Eviction">Garbage Collection</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Explicit_Removals">Explicit Removals</a> </li></ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Features">Features</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Statistics">Statistics</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained">Functional Idioms</a> </li><ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions_and_Predicates">Obtaining</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Predicates">Using Predicates</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions">Using Functions</a> </li></ul><li>Concurrency </li><ul><li><a href="/p/guava-libraries/wiki/ListenableFutureExplained">ListenableFuture</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained">Service</a> </li><ul><li><a href="/p/guava-libraries/wiki/ServiceExplained#Using_a_Service">Using</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained#Implementations">Implementations</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/StringsExplained">Strings</a> </li><ul><li><a href="/p/guava-libraries/wiki/StringsExplained#Joiner">Joiner</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Splitter">Splitter</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#CharMatcher">CharMatcher</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Charsets">Charsets</a> </li></ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained">Primitives</a> </li><ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Primitive_array_utilities">Primitive arrays</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#General_utility_methods">General utilities</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Byte_conversion_methods">Byte conversion</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Unsigned_support">Unsigned support</a> </li></ul><li><a href="/p/guava-libraries/wiki/RangesExplained">Ranges</a> </li><ul><li><a href="/p/guava-libraries/wiki/RangesExplained#Building_Ranges">Building</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Operations">Operations</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Discrete_Domains">Discrete Domains</a> </li></ul><li><a href="/p/guava-libraries/wiki/IOExplained">I/O</a> </li><li><a href="/p/guava-libraries/wiki/HashingExplained">Hashing</a> </li><ul><li><a href="/p/guava-libraries/wiki/HashingExplained#BloomFilter">BloomFilter</a> </li></ul><li><a href="/p/guava-libraries/wiki/EventBusExplained">EventBus</a> </li><li><a href="/p/guava-libraries/wiki/MathExplained">Math</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Math_on_Integral_Types">Integral</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Checked_Arithmetic">Overflow Checking</a> </li></ul><li><a href="/p/guava-libraries/wiki/MathExplained#Floating-point_arithmetic">Floating Point</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained">Reflection</a> </li><ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained#TypeToken">TypeToken</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReleaseHistory">Releases</a> </li><ul><li><a href="/p/guava-libraries/wiki/Release13">Release 13</a> </li><li><a href="/p/guava-libraries/wiki/Release12">Release 12</a> </li><li><a href="/p/guava-libraries/wiki/Release11">Release 11</a> </li><li><a href="/p/guava-libraries/wiki/Release10">Release 10</a> </li></ul><li>Tips </li><ul><li><a href="/p/guava-libraries/wiki/PhilosophyExplained">Philosophy</a> </li><li><a href="/p/guava-libraries/wiki/UseGuavaInYourBuild">Building with Guava</a> </li><li><a href="/p/guava-libraries/wiki/UsingProGuardWithGuava">Shrinking JARs with ProGuard</a> </li><li><a href="/p/guava-libraries/wiki/ApacheCommonCollectionsEquivalents">Translating from Apache Commons</a> </li><li><a href="/p/guava-libraries/wiki/Compatibility">Guava and Compatibility</a> </li><li><a href="/p/guava-libraries/wiki/IdeaGraveyard">Idea Graveyard</a> </li><li><a href="/p/guava-libraries/wiki/FriendsOfGuava">Friends of Guava</a> </li><li><a href="/p/guava-libraries/wiki/HowToContribute">How to Contribute</a> </li></ul><li><a href="/p/guava-libraries/wiki/GuavaTermsExplained">Glossary</a> </li><li><a href="http://groups.google.com/group/guava-discuss" rel="nofollow">Mailing List</a> </li><li><a href="http://stackoverflow.com/questions/tagged/guava" rel="nofollow">Stack Overflow</a> </li><li><a href="http://code.google.com/p/memory-measurer/wiki/ElementCostInDataStructures" rel="nofollow">Footprint of JDK/Guava data structures</a> </li></ul>
 </div>
 </div>
</div>

 </td>
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">UsingAndAvoidingNullExplained</span>
 &nbsp;
 <div> 
 
 <i>Guava tools to use and avoid the use of null, explained.</i>
 
 
 <br/>
 
 <a class="label" style="padding-top: 2px"
 href="/p/guava-libraries/w/list?q=label:explained"
 title=""
 >explained</a>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Tue Mar 20 16:30:36 2012">
 Mar 20, 2012</span>
 
 by 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <blockquote><i>&quot;Null sucks.&quot;</i>   -<a href="http://en.wikipedia.org/wiki/Doug_Lea" rel="nofollow">Doug Lea</a> 
</blockquote><p>   <blockquote><i>&quot;I call it my billion-dollar mistake.&quot;</i>   - <a href="http://en.wikipedia.org/wiki/C._A._R._Hoare" rel="nofollow">Sir C. A. R. Hoare</a>, on his invention of the null reference 
</blockquote></p><h1><a name="Using_and_avoiding_null"></a>Using and avoiding null<a href="#Using_and_avoiding_null" class="section_anchor"></a></h1><p>Careless use of <tt>null</tt> can cause a staggering variety of bugs.  Studying the Google code base, we found that something like 95% of collections weren&#x27;t supposed to have any null values in them, and having those fail fast rather than silently accept <tt>null</tt> would have been helpful to developers. </p><p>Additionally, <tt>null</tt> is unpleasantly ambiguous.  It&#x27;s rarely obvious what a <tt>null</tt> return value is supposed to mean -- for example, <tt>Map.get(key)</tt> can return <tt>null</tt> either because the value in the map is null, or the value is not in the map.  Null can mean failure, can mean success, can mean almost anything.  Using something other than <tt>null</tt> makes your meaning clear. </p><p>That said, there are times when <tt>null</tt> is the right and correct thing to use.  <tt>null</tt> is cheap, in terms of memory and speed, and it&#x27;s unavoidable in object arrays.  But in application code, as opposed to libraries, it is a major source of confusion, difficult and weird bugs, and unpleasant ambiguities -- e.g. when <tt>Map.get</tt> returns null, it can mean the value was absent, or the value was present and null.  Most critically, null gives no indication what a null value means. </p><p>For these reasons, many of Guava&#x27;s utilities are designed to fail fast in the presence of null rather than allow nulls to be used, so long as there is a null-friendly workaround available.  Additionally, Guava provides a number of facilities both to make using <tt>null</tt> easier, when you must, and to help you avoid using <tt>null</tt>. </p><h2><a name="Specific_Cases"></a>Specific Cases<a href="#Specific_Cases" class="section_anchor"></a></h2><p>If you&#x27;re trying to use <tt>null</tt> values in a <tt>Set</tt> or as a key in a <tt>Map</tt> -- don&#x27;t; it&#x27;s clearer (less surprising) if you explicitly special-case <tt>null</tt> during lookup operations. </p><p>If you want to use <tt>null</tt> as a value in a Map -- leave out that entry; keep a separate <tt>Set</tt> of non-null keys (or null keys).  It&#x27;s very easy to mix up the cases where a <tt>Map</tt> contains an entry for a key, with value <tt>null</tt>, and the case where the <tt>Map</tt> has no entry for a key.  It&#x27;s much better just to keep such keys separate, and to think about what it <i>means</i> to your application when the value associated with a key is <tt>null</tt>. </p><p>If you&#x27;re using nulls in a <tt>List</tt> -- if the list is sparse, might you rather use a <tt>Map&lt;Integer, E&gt;</tt>?  This might actually be more efficient, and could potentially actually match your application&#x27;s needs more accurately. </p><p>Consider if there is a natural &quot;null object&quot; that can be used. There isn&#x27;t always. But sometimes.  For example, if it&#x27;s an enum, add a constant to mean whatever you&#x27;re expecting null to mean here.  For example, <tt>java.math.RoundingMode</tt> has an <tt>UNNECESSARY</tt> value to indicate &quot;do no rounding, and throw an exception if rounding would be necessary.&quot; </p><p>If you really need null values, and you&#x27;re having problems with a null-hostile collection implementations, use a different implementation.  For example, use <tt>Collections.unmodifiableList(Lists.newArrayList())</tt> instead of <tt>ImmutableList</tt>. </p><h2><a name="Optional"></a>Optional<a href="#Optional" class="section_anchor"></a></h2><p>Many of the cases where programmers use <tt>null</tt> is to indicate some sort of absence: perhaps where there might have been a value, there is none, or one could not be found.  For example, <tt>Map.get</tt> returns <tt>null</tt> when no value is found for a key. </p><p><tt>Optional&lt;T&gt;</tt> is a way of replacing a nullable <tt>T</tt> reference with a non-null value.  An <tt>Optional</tt> may either contain a non-null <tt>T</tt> reference (in which case we say the reference is &quot;present&quot;), or it may contain nothing (in which case we say the reference is &quot;absent&quot;).  It is never said to &quot;contain null.&quot; </p><pre class="prettyprint">Optional&lt;Integer&gt; possible = Optional.of(5);
possible.isPresent(); // returns true
possible.get(); // returns 5</pre><p><tt>Optional</tt> is <strong>not</strong> intended as a direct analogue of any existing &quot;option&quot; or &quot;maybe&quot; construct from other programming environments, though it may bear some similarities. </p><p>We list some of the most common <tt>Optional</tt> operations here. </p><h3><a name="Making_an_Optional"></a>Making an Optional<a href="#Making_an_Optional" class="section_anchor"></a></h3><p>Each of these are static methods on <tt>Optional</tt>. </p><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#of(T)" rel="nofollow"> <tt>Optional.of(T)</tt> </a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Make an Optional containing the given non-null value, or fail fast on null. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#absent()" rel="nofollow"><tt>Optional.absent()</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Return an absent Optional of some type. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#fromNullable(T)" rel="nofollow"><tt>Optional.fromNullable(T)</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Turn the given possibly-null reference into an Optional, treating non-null as present and null as absent. </td></tr> </table></p><h3><a name="Query_methods"></a>Query methods<a href="#Query_methods" class="section_anchor"></a></h3><p>Each of these are non-static methods on a particular <tt>Optional&lt;T&gt;</tt> value. <table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#isPresent()" rel="nofollow"><tt>boolean isPresent()</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns <tt>true</tt> if this <tt>Optional</tt> contains a non-null instance. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#get()" rel="nofollow"><tt>T get()</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns the contained <tt>T</tt> instance, which must be present; otherwise, throws an <tt>IllegalStateException</tt>.</td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#or(T)" rel="nofollow"><tt>T or(T)</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns the present value in this <tt>Optional</tt>, or if there is none, returns the specified default. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#orNull()" rel="nofollow"><tt>T orNull()</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns the present value in this <tt>Optional</tt>, or if there is none, returns <tt>null</tt>.  The inverse operation of <tt>fromNullable</tt>. </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Optional.html#asSet()" rel="nofollow"><tt>Set&lt;T&gt; asSet()</tt></a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Returns an immutable singleton <tt>Set</tt> containing the instance in this <tt>Optional</tt>, if there is one, or otherwise an empty immutable set. </td></tr> </table></p><p><tt>Optional</tt> provides several more handy utility methods besides these; consult the Javadoc for details. </p><h3><a name="What&#x27;s_the_point?"></a>What&#x27;s the point?<a href="#What&#x27;s_the_point?" class="section_anchor"></a></h3><p>Besides the increase in readability that comes from giving <tt>null</tt> a <i>name</i>, the biggest advantage of Optional is its idiot-proof-ness. It forces you to actively think about the absent case if you want your program to compile at all, since you have to actively unwrap the Optional and address that case.  Null makes it disturbingly easy to simply forget things, and though FindBugs helps, we don&#x27;t think it addresses the issue nearly as well.  </p><p>This is especially relevant when you&#x27;re <strong>returning</strong> values that may or may not be &quot;present.&quot;  You (and others) are far more likely to forget that <tt>other.method(a, b)</tt> could return a null value than you&#x27;re likely to forget that <tt>a</tt> could be null when you&#x27;re implementing other.method.  Returning <tt>Optional</tt> makes it impossible for callers to forget that case, since they have to unwrap the object themselves for their code to compile. </p><h2><a name="Convenience_methods"></a>Convenience methods<a href="#Convenience_methods" class="section_anchor"></a></h2><p>Whenever you want a <tt>null</tt> value to be replaced with some default value instead, use <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Objects.html#firstNonNull(T, T)" rel="nofollow"><tt>Objects.firstNonNull(T, T)</tt></a>.  As the method name suggests, if both of the inputs are null, it fails fast with a <tt>NullPointerException</tt>.  If you are using an <tt>Optional</tt>, there are better alternatives -- e.g. <tt>first.or(second)</tt>. </p><p>A couple of methods dealing with possibly-null <tt>String</tt> values are provided in <tt>Strings</tt>.  Specifically, we provide the aptly named:   <table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Strings.html#emptyToNull(java.lang.String)" rel="nofollow"><tt>emptyToNull(String)</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Strings.html#isNullOrEmpty(java.lang.String)" rel="nofollow"><tt>isNullOrEmpty(String)</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Strings.html#nullToEmpty(java.lang.String)" rel="nofollow"><tt>nullToEmpty(String)</tt></a> </td></tr> </table></p><p>We would like to emphasize that these methods are primarily for interfacing with unpleasant APIs that equate null strings and empty strings.  Every time <i>you</i> write code that conflates null strings and empty strings, the Guava team weeps.  (If null strings and empty strings mean actively different things, that&#x27;s better, but treating them as the same thing is a disturbingly common code smell.) </p>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 <div id="wikicommentcol">
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

<div class="collapse">


 


<div id="commentlist">

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/105766086244428057700/">thomas.a...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Fri Dec 30 02:48:08 2011">Dec 30, 2011</span>
 <div>
<div class="commentcontent">
<p>An additional argument against using null is that it punches a hole in the type system. Once you allow null in interfaces every time T means T or null. The Liskov substitution principle is violated.  </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/105927909627739739920/">MohsinHi...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Tue Jan 10 23:12:22 2012">Jan 10, 2012</span>
 <div>
<div class="commentcontent">
<p>Lovely. Nice little simple but elegant idea. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/117679010609155180272/">j...@nwsnet.de</a
>,
 
 </span>
 <span class="date" title="Wed Jan 11 03:20:47 2012">Jan 11, 2012</span>
 <div>
<div class="commentcontent">
<p>&quot;Every time you write code that conflates null strings and empty strings, the Guava team weeps.&quot; There are APIs that return both <tt>null</tt> (e.g. if the given value is <tt>null</tt>; however, a precondition to guard against that is more secure) or an empty string (say, filename extension extraction). I think it is often appropriate to return an <tt>Optional&lt;String&gt;</tt> which never references an empty string instead, so essentially one would treat <tt>null</tt> and the empty string the same – as the absent value (in the given example: the filename extension; returning the empty string for a filename like &quot;TODO&quot; or &quot;.vimrc&quot; seems totally wrong to me¹). </p><p>¹) I recently compared my implementation against <tt>Files.getFileExtension</tt> and (IIRC) discovered that the latter behaves differently. But that is another topic better discussed elsewhere. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/109942575499337312339/">tbeer...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Wed Mar 28 00:54:12 2012">Mar 28, 2012</span>
 <div>
<div class="commentcontent">
<p>Hm. I understand the idea of &quot;rather return a value indicating that there is no value&quot;, but I&#x27;m not warming up to the idea that null is bad and by extension the need for the Optional wrapper.  </p><p>I also understand the ambiguity about the get returning null in two scenario&#x27;s, but is that a problem caused by null or by the implementation of the get? Apparently the implementation has a duality in its API, to solve that it either could never accept null as a value, or throw a ValueNotFound<a href="/p/guava-libraries/w/edit/ValueNotFound">?</a> exception when an element is not found instead of returning null (and you should have done a call to &quot;contains&quot; first)?  </p><p>I do agree that using null is something that should be well considered; null means, there is no data. As soon as null is starting to have a meaning (like in &quot;do not round&quot;), than naturally it is best to define an actual value. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Apr 23 07:45:22 2012">Apr 23, 2012</span>
 <div>
<div class="commentcontent">
<p>@tbeernot, part of the point of Optional is that you can&#x27;t accidentally forget it.  It&#x27;s easy to forget that a method can return null, but when the type system forces you to unwrap the Optional, it serves as a reminder that you have to handle the Optional.absent() case.  FindBugs<a href="/p/guava-libraries/w/edit/FindBugs">?</a> and other static analysis utilities help, but they&#x27;re not as reliable as being forced to check for the Optional.absent() case by the type system. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/107282289490928383265/">quel...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon May 28 21:54:26 2012">May 28, 2012</span>
 <div>
<div class="commentcontent">
<p>The lack of a flatten and/or flatTransform method on Optional is very limiting, IMO. Conceptual implementation: </p><pre class="prettyprint">public class Optional {
  public &lt;V&gt; Optional&lt;V&gt; flatTransform(final Function&lt;? super T, Optional&lt;V&gt;&gt; function) {
    return isPresent() ? function.apply(get()) : Optional.&lt;V&gt;absent();
  }
}</pre><p>Imagine four methods you have to call in order, each potentially returning no result: </p><pre class="prettyprint">Optional&lt;A&gt; one();
Optional&lt;B&gt; two(A a);
Optional&lt;C&gt; three(B b);
Optional&lt;D&gt; four(B b, C c);</pre><p>With a flatTransform, we can call them like so: </p><pre class="prettyprint">final Optional&lt;D&gt; result = one().flatTransform(new Function&lt;A, Optional&lt;D&gt;&gt;() {
  public Optional&lt;D&gt; apply(final A a) {
    return two(a).flatTransform(new Function&lt;B, Optional&lt;D&gt;&gt;() {
      public Optional&lt;D&gt; apply(final B b) {
        return three(b).flatTransform(new Function&lt;C, Optional&lt;D&gt;&gt;() {
          public Optional&lt;D&gt; apply(final C c) {
            return four(b, c);
        })
    })
})</pre><p>Yes, an there&#x27;s an absurd amount of syntactic noise to specify all the functions. But I&#x27;d be interested to see the best that can be done with the existing API. I don&#x27;t consider this a contrived example, but maybe I&#x27;m alone there. </p><p>In Java 8, I believe the flatTransform approach will clearly beat any other (using <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html" rel="nofollow">State of the Lambda 4th Edition</a>): </p><pre class="prettyprint">final Optional&lt;D&gt; result =
  one().flatTransform((A a) -&gt;
  two(a).flatTransform((B b) -&gt;
  three(b).flatTransform((C c) -&gt;
  four(b, c))));</pre><p>Skate to where the puck is going to be. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Jun 11 09:39:35 2012">Jun 11, 2012</span>
 <div>
<div class="commentcontent">
<p>@quelgar, part of it is that I don&#x27;t think we see Functions to Optional as very common at all, even assuming that you were willing to accept the syntactic noise of Functions.  Do you have an actual  example from your real-world experience that called for those features? </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/106170273044483861393/">Ryan.Ha...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Wed Jul  4 18:34:41 2012">Jul 4, 2012</span>
 <div>
<div class="commentcontent">
<p>By the by, <tt>Optional&lt;T&gt;</tt> is the Java encoding of Haskell&#x27;s <tt>Maybe T</tt> type. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/harmathdenes/">harmathdenes</a
>,
 
 </span>
 <span class="date" title="Mon Jul  9 10:55:14 2012">Jul 9, 2012</span>
 <div>
<div class="commentcontent">
<p>@wasserman.lous: For a practical example, see <a href="http://kerflyn.wordpress.com/2011/12/05/from-optional-to-monad-with-guava/" rel="nofollow">http://kerflyn.wordpress.com/2011/12/05/from-optional-to-monad-with-guava/</a> It&#x27;s also sad that Optional doesn&#x27;t implement Iterable, so Iterables.concat(Iterable&lt;? extends Iterable&lt;? extends T&gt;&gt;) can&#x27;t be used either to implement flatMap. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Jul  9 14:01:39 2012">Jul 9, 2012</span>
 <div>
<div class="commentcontent">
<p>Just FYI: it was a <strong>very</strong> deliberate decision that Optional shouldn&#x27;t implement Iterable; we don&#x27;t think that </p><p>for (T t : optional) { <blockquote>.. 
</blockquote>} </p><p>is really readable at all.  (Trust me, there were hundred-message email threads discussing whether or not Optional should implement Iterable). </p><p>But all that said, the code from that link looks very much like the &quot;conventional approach&quot; would be significantly more simple.  No Functions, no Optionals, just a more direct approach.  The simplest way I see to eliminate the chained calls is to add a quick utility method implemented as </p><p>Objects.firstNonNull(map.get(key), ImmutableMap<a href="/p/guava-libraries/w/edit/ImmutableMap">?</a>.of()) </p><p>which wouldn&#x27;t require any object instantiations, and would let you pretty simply string things together. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/113558573339458925063/">dreamhea...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Thu Jul 19 00:55:18 2012">Jul 19, 2012</span>
 <div>
<div class="commentcontent">
<p>@wasserman.louis: The same practical example with @harmathdenes mentioned. If we got bind/flatTransform or something like that, that code could be  </p><pre class="prettyprint">of(productsByCountry)
  .bind(getFromCountry(country))
  .bind(getFromCity(city))
  .bind(getFromSupplier(supplier))
  .bind(getFromCode(code));</pre><p>It&#x27;s much nicer. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/100208261211359315185/">soft.ve...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon Aug  6 01:09:07 2012">Aug 6, 2012</span>
 <div>
<div class="commentcontent">
<p>Well Written Article! Informative. Thanks wasserman.louis </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/115685224744739562611/">kap4...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Wed Oct 24 05:35:30 2012">Oct 24, 2012</span>
 <div>
<div class="commentcontent">
<p>Great User Guide, but it lacks examples.  How about a few snippets on proper ways of using it? </p>
</div>
 
 
 </div>
 </div>
 

</div>
</div>

 


 <script type="text/javascript">
 function delComment(sequence_num, create_time, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.create_time.value = create_time;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 </div>
 
 
 
 
 <br>
 <div class="artifactcomment">
 <span class="indicator">&#9658;</span> <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FUsingAndAvoidingNullExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FUsingAndAvoidingNullExplained"
 >Sign in</a> to add a comment
 </div>
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="UsingAndAvoidingNullExplained" >
 <input type="hidden" name="token" value="" >
 </form>


 <script src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_core.js"></script>
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


