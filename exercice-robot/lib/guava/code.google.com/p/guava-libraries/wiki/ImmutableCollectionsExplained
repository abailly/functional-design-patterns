
 



 



 
 
 <!DOCTYPE html>
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" >
 <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" >
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 
 <link rel="canonical" href="http://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained" />
 
 <script type="text/javascript">
 
 
 
 
 var codesite_token = null;
 
 
 var CS_env = {"profileUrl":null,"token":null,"assetHostPath":"http://www.gstatic.com/codesite/ph","domainName":null,"assetVersionPath":"http://www.gstatic.com/codesite/ph/17134919371905794448","projectHomeUrl":"/p/guava-libraries","relativeBaseUrl":"","projectName":"guava-libraries","loggedInUserEmail":null};
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 
 </script>
 
 
 <title>ImmutableCollectionsExplained - 
 guava-libraries -
 
 Guava's immutable collections utilities, explained. - 
 Guava: Google Core Libraries for Java 1.6+ - Google Project Hosting
 </title>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/core.css">
 
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/ph_detail.css" >
 
 
 
 <link type="application/atom+xml" rel="alternate" href="/feeds/p/guava-libraries/gitchanges/basic?repo=wiki&amp;path=/ImmutableCollectionsExplained.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/17134919371905794448/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 
 
 #maincol {
 padding-top: 0;
 padding-bottom: 0;
 }

 
 </style>
</head>
<body class="t6">
<script type="text/javascript">
 window.___gcfg = {lang: 'en'};
 (function() 
 {var po = document.createElement("script");
 po.type = "text/javascript"; po.async = true;po.src = "https://apis.google.com/js/plusone.js";
 var s = document.getElementsByTagName("script")[0];
 s.parentNode.insertBefore(po, s);
 })();
</script>
<div class="headbg">

 <div id="gaia">
 

 <span>
 
 
 <a href="#" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>&#9660;</small></a>
 | <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FImmutableCollectionsExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FImmutableCollectionsExplained" onclick="_CS_click('/gb/ph/signin');"><u>Sign in</u></a>
 
 </span>

 </div>

 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px"></div>
<!--[if lte IE 7]>
<div style="text-align:center;">
Your version of Internet Explorer is not supported. Try a browser that
contributes to open source, such as <a href="http://www.firefox.com">Firefox</a>,
<a href="http://www.google.com/chrome">Google Chrome</a>, or
<a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>.
</div>
<![endif]-->



 <table style="padding:0px; margin: 0px 0px 10px 0px; width:100%" cellpadding="0" cellspacing="0"
 itemscope itemtype="http://schema.org/CreativeWork">
 <tr style="height: 58px;">
 
 
 
 <td id="plogo">
 <link itemprop="url" href="/p/guava-libraries">
 <a href="/p/guava-libraries/">
 
 <img src="http://www.gstatic.com/codesite/ph/images/search-48.gif" alt="Logo" itemprop="image">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em">
 
 <div id="pname">
 <a href="/p/guava-libraries/"><span itemprop="name">guava-libraries</span></a>
 </div>
 
 <div id="psum">
 <a id="project_summary_link"
 href="/p/guava-libraries/"><span itemprop="description">Guava: Google Core Libraries for Java 1.6+</span></a>
 
 </div>
 
 
 </td>
 <td style="white-space:nowrap;text-align:right; vertical-align:bottom;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="" type="text">
 
 <input type="submit" name="projectsearch" value="Search projects" >
 </form>
 
 </tr>
 </table>

</div>

 
<div id="mt" class="gtb"> 
 <a href="/p/guava-libraries/" class="tab ">Project&nbsp;Home</a>
 
 
 
 
 <a href="/p/guava-libraries/downloads/list" class="tab ">Downloads</a>
 
 
 
 
 
 <a href="/p/guava-libraries/wiki/GuavaExplained?tm=6" class="tab active">Wiki</a>
 
 
 
 
 
 <a href="/p/guava-libraries/issues/list"
 class="tab ">Issues</a>
 
 
 
 
 
 <a href="/p/guava-libraries/source/checkout"
 class="tab ">Source</a>
 
 
 
 
 
 
 
 
 
 
 <div class=gtbc></div>
</div>
<table cellspacing="0" cellpadding="0" width="100%" align="center" border="0" class="st">
 <tr>
 
 
 
 
 <td class="subt">
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/guava-libraries/w/list" method="GET" style="display:inline">
 <select id="can" name="can" >
 <option disabled="disabled">Search within:</option>
 
 <option value="1" >&nbsp;All wiki pages</option>
 <option value="3" >&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4" >&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input type="text" size="38" id="searchq" name="q" value=""
 autocomplete="off" ></span>
 
 
 
 <input type="submit" value="Search" >
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td align="right" valign="top" class="bevel-right"></td>
 </tr>
</table>


<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>
<div id="maincol"
 
 
 style="padding:0 3px 3px 0; margin:0"
 
 
>

 






 
<style type="text/css">
 #wikimaincol { padding-top: 6px; padding-left:1em}
 #sidebarcontainer {
 padding: 1.5em 2px 2px 2px;
 min-width: 15em;
 max-width: 20em;
 overflow:hidden;
}
 .sidebartop ul { margin:0 0 0 .5em; padding-left:0 !important; list-style:none}
 .sidebartop ul ul { margin-left:1em; padding-left:0; list-style:none; display:none}
 .sidebartop li { margin:0 0 2px 0; padding:1px; padding-left:14px; cursor:pointer}
 .sidebartop li a { padding:2px}
 .sidebartop li { background: url(http://www.gstatic.com/codesite/ph/images/plus.gif) no-repeat 1px 3px}
 .sidebartop li.treeopen { background: url(http://www.gstatic.com/codesite/ph/images/minus.gif) no-repeat 1px 3px}
 .sidebartop li.treeleaf { background:none}
 .currentpagelink { 
 font-weight: bold;
 text-decoration: none;
 color: black !important; 
 background: #c3d9ff;
 }
 .sidebartop ul.treeleafcontainer { display:block;}
 .sidebarcontent { 
 vertical-align:top;
 padding-right: 3px;
 border-right: 2px solid #ccc;
 }
</style>



 <style type="text/css">
 .delcom { background: #e8e8e8 }
 .commentcontent {
 margin: 2em;
 padding: 0px 10px;
 width: 66em;
 }
 .artifactcomment {
 border-top: 3px solid #c3d9ff;
 }
 #commentform {
 border-top: 3px solid #c3d9ff;
 }
 </style>

<div id="wikipage">
<table>
 <tr>
 
 
 <td class="sidebarcontent">
 <div class="vt expand" id="wikisidebar">
 <div>
 
 <div style="float:right;">
 <a class="ifExpand" style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Hide sidebar"><b>&lsaquo;&lsaquo;</b></a>
 </div>
 <div class="ifCollapse" style="padding:0 2px">
 <a style="font-size:130%; color:blue; text-decoration:none"
 href="#" onclick="_DW_toggleSidebar(this); return false;"
 title="Show sidebar"><b>&rsaquo;&rsaquo;</b></a>
 </div>
 
 
 <div id="sidebarcontainer" class="sidebartop ifExpand">
 <ul><li><a href="/p/guava-libraries/wiki/GuavaExplained">Introduction</a> </li><li>Basic Utilities </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Using/avoiding null</a> </li><ul><li><a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained#Optional">Optional</a> </li></ul><li><a href="/p/guava-libraries/wiki/PreconditionsExplained">Preconditions</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained">Ordering</a> </li><ul><li><a href="/p/guava-libraries/wiki/OrderingExplained#Creation">Creation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Manipulation">Manipulation</a> </li><li><a href="/p/guava-libraries/wiki/OrderingExplained#Application">Application</a> </li></ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained">Object methods</a> </li><ul><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#equals">equals</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#hashCode">hashCode</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#toString">toString</a> </li><li><a href="/p/guava-libraries/wiki/CommonObjectUtilitiesExplained#compare/compareTo">compare/compareTo</a> </li></ul><li><a href="/p/guava-libraries/wiki/ThrowablesExplained">Throwables</a> </li></ul><li>Collections </li><ul><li><a href="/p/guava-libraries/wiki/ImmutableCollectionsExplained">Immutable collections</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained">New collection types</a> </li><ul><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multiset">Multiset</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multimap">Multimap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#BiMap">BiMap</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Table">Table</a> </li><li><a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#ClassToInstanceMap">ClassToInstanceMap</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained">Utility Classes</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Iterables">Iterables</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Lists">Lists</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Sets">Sets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Maps">Maps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multisets">Multisets</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Multimaps">Multimaps</a> </li><li><a href="/p/guava-libraries/wiki/CollectionUtilitiesExplained#Tables">Tables</a> </li></ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained">Extension Utilities</a> </li><ul><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#Forwarding_Decorators">Forwarding Decorators</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#PeekingIterator">PeekingIterator</a> </li><li><a href="/p/guava-libraries/wiki/CollectionHelpersExplained#AbstractIterator">AbstractIterator</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/CachesExplained">Caches</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Applicability">Applicability</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Population">Population</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Eviction">Eviction</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Removal_Listeners">Removal Listeners</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Refresh">Refresh</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Timed_Eviction">Timed Eviction</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Size-based_Eviction">Size Caps</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Reference-based_Eviction">Garbage Collection</a> </li><li><a href="/p/guava-libraries/wiki/CachesExplained#Explicit_Removals">Explicit Removals</a> </li></ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Features">Features</a> </li><ul><li><a href="/p/guava-libraries/wiki/CachesExplained#Statistics">Statistics</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained">Functional Idioms</a> </li><ul><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions_and_Predicates">Obtaining</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Predicates">Using Predicates</a> </li><li><a href="/p/guava-libraries/wiki/FunctionalExplained#Functions">Using Functions</a> </li></ul><li>Concurrency </li><ul><li><a href="/p/guava-libraries/wiki/ListenableFutureExplained">ListenableFuture</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained">Service</a> </li><ul><li><a href="/p/guava-libraries/wiki/ServiceExplained#Using_a_Service">Using</a> </li><li><a href="/p/guava-libraries/wiki/ServiceExplained#Implementations">Implementations</a> </li></ul></ul><li><a href="/p/guava-libraries/wiki/StringsExplained">Strings</a> </li><ul><li><a href="/p/guava-libraries/wiki/StringsExplained#Joiner">Joiner</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Splitter">Splitter</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#CharMatcher">CharMatcher</a> </li><li><a href="/p/guava-libraries/wiki/StringsExplained#Charsets">Charsets</a> </li></ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained">Primitives</a> </li><ul><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Primitive_array_utilities">Primitive arrays</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#General_utility_methods">General utilities</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Byte_conversion_methods">Byte conversion</a> </li><li><a href="/p/guava-libraries/wiki/PrimitivesExplained#Unsigned_support">Unsigned support</a> </li></ul><li><a href="/p/guava-libraries/wiki/RangesExplained">Ranges</a> </li><ul><li><a href="/p/guava-libraries/wiki/RangesExplained#Building_Ranges">Building</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Operations">Operations</a> </li><li><a href="/p/guava-libraries/wiki/RangesExplained#Discrete_Domains">Discrete Domains</a> </li></ul><li><a href="/p/guava-libraries/wiki/IOExplained">I/O</a> </li><li><a href="/p/guava-libraries/wiki/HashingExplained">Hashing</a> </li><ul><li><a href="/p/guava-libraries/wiki/HashingExplained#BloomFilter">BloomFilter</a> </li></ul><li><a href="/p/guava-libraries/wiki/EventBusExplained">EventBus</a> </li><li><a href="/p/guava-libraries/wiki/MathExplained">Math</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Math_on_Integral_Types">Integral</a> </li><ul><li><a href="/p/guava-libraries/wiki/MathExplained#Checked_Arithmetic">Overflow Checking</a> </li></ul><li><a href="/p/guava-libraries/wiki/MathExplained#Floating-point_arithmetic">Floating Point</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained">Reflection</a> </li><ul><li><a href="/p/guava-libraries/wiki/ReflectionExplained#TypeToken">TypeToken</a> </li></ul><li><a href="/p/guava-libraries/wiki/ReleaseHistory">Releases</a> </li><ul><li><a href="/p/guava-libraries/wiki/Release13">Release 13</a> </li><li><a href="/p/guava-libraries/wiki/Release12">Release 12</a> </li><li><a href="/p/guava-libraries/wiki/Release11">Release 11</a> </li><li><a href="/p/guava-libraries/wiki/Release10">Release 10</a> </li></ul><li>Tips </li><ul><li><a href="/p/guava-libraries/wiki/PhilosophyExplained">Philosophy</a> </li><li><a href="/p/guava-libraries/wiki/UseGuavaInYourBuild">Building with Guava</a> </li><li><a href="/p/guava-libraries/wiki/UsingProGuardWithGuava">Shrinking JARs with ProGuard</a> </li><li><a href="/p/guava-libraries/wiki/ApacheCommonCollectionsEquivalents">Translating from Apache Commons</a> </li><li><a href="/p/guava-libraries/wiki/Compatibility">Guava and Compatibility</a> </li><li><a href="/p/guava-libraries/wiki/IdeaGraveyard">Idea Graveyard</a> </li><li><a href="/p/guava-libraries/wiki/FriendsOfGuava">Friends of Guava</a> </li><li><a href="/p/guava-libraries/wiki/HowToContribute">How to Contribute</a> </li></ul><li><a href="/p/guava-libraries/wiki/GuavaTermsExplained">Glossary</a> </li><li><a href="http://groups.google.com/group/guava-discuss" rel="nofollow">Mailing List</a> </li><li><a href="http://stackoverflow.com/questions/tagged/guava" rel="nofollow">Stack Overflow</a> </li><li><a href="http://code.google.com/p/memory-measurer/wiki/ElementCostInDataStructures" rel="nofollow">Footprint of JDK/Guava data structures</a> </li></ul>
 </div>
 </div>
</div>

 </td>
 
 <td style="vertical-align:top; padding-left:5px">
 
 <div id="wikiheader">
 
 <span style="font-size:120%;font-weight:bold">ImmutableCollectionsExplained</span>
 &nbsp;
 <div> 
 
 <i>Guava's immutable collections utilities, explained.</i>
 
 
 <br/>
 
 <a class="label" style="padding-top: 2px"
 href="/p/guava-libraries/w/list?q=label:explained"
 title=""
 >explained</a>
 
 
 
 <div id="wikiauthor" style="float:right">
 Updated <span title="Mon Sep 17 09:36:41 2012">
 Sep 17, 2012</span>
 
 by 

 <a class="userlink"
 href="/u/106380260657486970018/">lowas...@google.com</a
>
 
 </div>
 </div>
 </div>
 
 <div id="wikicontent">
 <div class="vt" id="wikimaincol">
 <h1><a name="Example"></a>Example<a href="#Example" class="section_anchor"></a></h1><pre class="prettyprint">public static final ImmutableSet&lt;String&gt; COLOR_NAMES = ImmutableSet.of(
  &quot;red&quot;,
  &quot;orange&quot;,
  &quot;yellow&quot;,
  &quot;green&quot;,
  &quot;blue&quot;,
  &quot;purple&quot;);

class Foo {
  Set&lt;Bar&gt; bars;
  Foo(Set&lt;Bar&gt; bars) {
    this.bars = ImmutableSet.copyOf(bars); // defensive copy!
  }
}</pre><h1><a name="Why?"></a>Why?<a href="#Why?" class="section_anchor"></a></h1><p>Immutable objects have many advantages, including: </p><ul><li>Safe for use by untrusted libraries. </li><li>Thread-safe: can be used by many threads with no risk of race conditions. </li><li>Doesn&#x27;t need to support mutation, and can make time and space savings with that assumption.  All immutable collection implementations are more memory-efficient than their mutable siblings (<a href="http://code.google.com/p/memory-measurer/wiki/ElementCostInDataStructures" rel="nofollow">analysis</a>) </li><li>Can be used as a constant, with the expectation that it will remain fixed </li></ul><p>Making immutable copies of objects is a good defensive programming technique.  Guava provides simple, easy-to-use immutable versions of each standard <tt>Collection</tt> type, including Guava&#x27;s own <tt>Collection</tt> variations. </p><p>The JDK provides <tt>Collections.unmodifiableXXX</tt> methods, but in our opinion, these can be <ul><li>unwieldy and verbose; unpleasant to use everywhere you want to make defensive copies </li><li>unsafe: the returned collections are only truly immutable if nobody holds a reference to the original collection </li><li>inefficient: the data structures still have all the overhead of mutable collections, including concurrent modification checks, extra space in hash tables, etc.  </li></ul></p><p><strong>When you don&#x27;t expect to modify a collection, or expect a collection to remain constant, it&#x27;s a good practice to defensively copy it into an immutable collection.</strong> </p><p><strong>Important:</strong> Each of the Guava immutable collection implementations <i>rejects null values.</i>  We did an exhaustive study on Google&#x27;s internal code base that indicated that <tt>null</tt> elements were allowed in collections about 5% of the time, and the other 95% of cases were best served by failing fast on nulls.  If you need to use null values, consider using <tt>Collections.unmodifiableList</tt> and its friends on a collection implementation that permits null.  More detailed suggestions can be found <a href="/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">here</a>. </p><h1><a name="How?"></a>How?<a href="#How?" class="section_anchor"></a></h1><p>An <tt>ImmutableXXX</tt> collection can be created in several ways: <ul><li>using the <tt>copyOf</tt> method, for example, <tt>ImmutableSet.copyOf(set)</tt> </li><li>using the <tt>of</tt> method, for example, <tt>ImmutableSet.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</tt> or <tt>ImmutableMap.of(&quot;a&quot;, 1, &quot;b&quot;, 2)</tt> </li><li>using a <tt>Builder</tt>, for example, </li></p><pre class="prettyprint">public static final ImmutableSet&lt;Color&gt; GOOGLE_COLORS =
       ImmutableSet.&lt;Color&gt;builder()
           .addAll(WEBSAFE_COLORS)
           .add(new Color(0, 191, 255))
           .build();</pre></ul><p>Except for sorted collections, <strong>order is preserved from construction time</strong>. For example, </p><pre class="prettyprint">ImmutableSet.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;)</pre><p>will iterate over its elements in the order &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;. </p><h3><a name="copyOf_is_smarter_than_you_think"></a><tt>copyOf</tt> is smarter than you think<a href="#copyOf_is_smarter_than_you_think" class="section_anchor"></a></h3><p>It is useful to remember that <tt>ImmutableXXX.copyOf</tt> attempts to avoid copying the data when it is safe to do so -- the exact details are unspecified, but the implementation is typically &quot;smart&quot;.  For example, </p><pre class="prettyprint">ImmutableSet&lt;String&gt; foobar = ImmutableSet.of(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;);
thingamajig(foobar);

void thingamajig(Collection&lt;String&gt; collection) {
   ImmutableList&lt;String&gt; defensiveCopy = ImmutableList.copyOf(collection);
   ...
}</pre><p>In this code, <tt>ImmutableList.copyOf(foobar)</tt> will be smart enough to just return <tt>foobar.asList()</tt>, which is a constant-time view of the <tt>ImmutableSet</tt>. </p><p>As a general heuristic, <tt>ImmutableXXX.copyOf(ImmutableCollection)</tt> tries to avoid a linear-time copy if </p><ul><li>it&#x27;s possible using the underlying data structures in constant time.  For example, <tt>ImmutableSet.copyOf(ImmutableList)</tt> can&#x27;t be done in constant time. </li><li>it wouldn&#x27;t cause memory leaks -- for example, if you have <tt>ImmutableList&lt;String&gt; hugeList</tt>, and you do <tt>ImmutableList.copyOf(hugeList.subList(0, 10))</tt>, an explicit copy is performed, so as to avoid accidentally holding on to references in <tt>hugeList</tt> that aren&#x27;t needed. </li><li>it won&#x27;t change semantics -- so <tt>ImmutableSet.copyOf(myImmutableSortedSet)</tt> will perform an explicit copy, because the <tt>hashCode()</tt> and <tt>equals</tt> used by <tt>ImmutableSet</tt> have different semantics from the comparator-based behavior of <tt>ImmutableSortedSet</tt>. </li></ul><p>This helps minimize the performance overhead of good defensive programming style. </p><h3><a name="asList"></a><tt>asList</tt><a href="#asList" class="section_anchor"></a></h3><p>All immutable collections provide an <tt>ImmutableList</tt> view via <tt>asList()</tt>, so -- for example -- even if you have data stored as an <tt>ImmutableSortedSet</tt>, you can get the <tt>k</tt>th smallest element with <tt>sortedSet.asList().get(k)</tt>. </p><p>The returned <tt>ImmutableList</tt> is frequently -- not always, but frequently -- a constant-overhead view, rather than an explicit copy.  That said, it&#x27;s often smarter than your average <tt>List</tt> -- for example, it&#x27;ll use the efficient <tt>contains</tt> methods of the backing collection. </p><h1><a name="Details"></a>Details<a href="#Details" class="section_anchor"></a></h1><h2><a name="Where?"></a>Where?<a href="#Where?" class="section_anchor"></a></h2><p><table class="wikitable"><tr><td style="border: 1px solid #ccc; padding: 5px;"> Interface </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK or Guava? </td><td style="border: 1px solid #ccc; padding: 5px;"> Immutable Version </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Collection</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableCollection.html" rel="nofollow"><tt>ImmutableCollection</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>List</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableList.html" rel="nofollow"><tt>ImmutableList</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Set</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableSet.html" rel="nofollow"><tt>ImmutableSet</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>SortedSet</tt>/<tt>NavigableSet</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableSortedSet.html" rel="nofollow"><tt>ImmutableSortedSet</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>Map</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableMap.html" rel="nofollow"><tt>ImmutableMap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>SortedMap</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> JDK </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableSortedMap.html" rel="nofollow"><tt>ImmutableSortedMap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multiset">Multiset</a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableMultiset.html" rel="nofollow"><tt>ImmutableMultiset</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>SortedMultiset</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release12/javadoc/com/google/common/collect/ImmutableSortedMultiset.html" rel="nofollow"><tt>ImmutableSortedMultiset</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Multimap">Multimap</a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableMultimap.html" rel="nofollow"><tt>ImmutableMultimap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>ListMultimap</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableListMultimap.html" rel="nofollow"><tt>ImmutableListMultimap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <tt>SetMultimap</tt> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableSetMultimap.html" rel="nofollow"><tt>ImmutableSetMultimap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#BiMap">BiMap</a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableBiMap.html" rel="nofollow"><tt>ImmutableBiMap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#ClassToInstanceMap">ClassToInstanceMap</a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableClassToInstanceMap.html" rel="nofollow"><tt>ImmutableClassToInstanceMap</tt></a> </td></tr> <tr><td style="border: 1px solid #ccc; padding: 5px;"> <a href="/p/guava-libraries/wiki/NewCollectionTypesExplained#Table">Table</a> </td><td style="border: 1px solid #ccc; padding: 5px;"> Guava </td><td style="border: 1px solid #ccc; padding: 5px;"> <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/collect/ImmutableTable.html" rel="nofollow"><tt>ImmutableTable</tt></a> </td></tr> </table></p>
 </div>
 </div>
 </td><tr>
</table>
 </div>


 
 <div id="wikicommentcol">
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

<div class="collapse">


 


<div id="commentlist">

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/105766086244428057700/">thomas.a...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon Dec 12 23:30:38 2011">Dec 12, 2011</span>
 <div>
<div class="commentcontent">
<p>Open question: When should you not use immutable collections?  </p><p>&gt; rejects null values. </p><p>If you need to use null values, consider using Collections.unmodifiableList and its friends on a collection implementation that permits null or Collection&lt;Option&lt;T&gt;&gt;. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Sun Dec 18 10:14:22 2011">Dec 18, 2011</span>
 <div>
<div class="commentcontent">
<p>Dealt with using a link to <a href="/p/guava-libraries/wiki/LivingWithNullHostileCollections">LivingWithNullHostileCollections</a>. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/105766086244428057700/">thomas.a...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Sun Jan  8 23:23:09 2012">Jan 8, 2012</span>
 <div>
<div class="commentcontent">
<p>&gt; When you don&#x27;t expect to modify a collection, or expect a collection to remain constant, it&#x27;s a good practice to defensively copy it into an immutable collection. </p><p>If not a defensive copy is an even better idea. </p><pre class="prettyprint">class Foo {
  Set&lt;Bar&gt; bars;
  Foo(Set&lt;Bar&gt; bars) {
    this.bars = ImmutableSet.copyOf(bars); // defensive copy!
  }
}</pre><p>could be replaced by: </p><pre class="prettyprint">class Foo {
  Set&lt;Bar&gt; bars;
  Foo(ImmutableSet&lt;Bar&gt; bars) {
    ..
  }
}</pre><p>for places where you have full control over client and it&#x27;s natural to work with immutable sets. This adds some documentation about the behavior of your code and you can skip the defensive copy. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/113937141757020325516/">cgdec...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon Jan  9 08:14:57 2012">Jan 9, 2012</span>
 <div>
<div class="commentcontent">
<p>@thoms.andreas.jung: You could do that, but in general I wouldn&#x27;t do it even with full control of all clients of the method (except maybe in cases where the method/constructor would only be used within the same class, say) because you might just want to be able to pass in a set that was created some other way at some point and because ImmutableSet<a href="/p/guava-libraries/w/edit/ImmutableSet">?</a>.copyOf just returns its argument if it&#x27;s an ImmutableSet<a href="/p/guava-libraries/w/edit/ImmutableSet">?</a> anyway. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Jan  9 08:28:12 2012">Jan 9, 2012</span>
 <div>
<div class="commentcontent">
<p>Exactly.  If you pass the Foo constructor an ImmutableSet<a href="/p/guava-libraries/w/edit/ImmutableSet">?</a>&lt;Bar&gt;, it doesn&#x27;t do a full copy anyway: it&#x27;s smart like that.  So why bother? </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/112471654124742718187/">dov...@google.com</a
>,
 
 </span>
 <span class="date" title="Mon Mar  5 17:34:56 2012">Mar 5, 2012</span>
 <div>
<div class="commentcontent">
<p>I believe the sentence:  </p><blockquote>&quot;It is useful to remember that ImmutableXXX.copyOf attempts to avoid copying the data when it is safe to do so; for example, if it would perform a copy of another complete ImmutableList<a href="/p/guava-libraries/w/edit/ImmutableList">?</a> (not a sublist).&quot; 
</blockquote><p>would be clearer if it read: </p><blockquote>&quot;It is useful to remember that ImmutableXXX.copyOf attempts to avoid copying the data when it is safe to do so; for example, if &lt;CHANGE&gt;its argument is&lt;/CHANGE&gt; another complete ImmutableList<a href="/p/guava-libraries/w/edit/ImmutableList">?</a> (not a sublist).&quot; 
</blockquote><p>The current sentence structure &quot;copyOf attempts to avoid copying... if it would perform a copy&quot; seems convoluted to me, mildly confusing, and opposite what it actually means upon careful parsing and code perusal. </p><p>More importantly, the next sentence states: </p><blockquote>&quot;All immutable collections provide an ImmutableList<a href="/p/guava-libraries/w/edit/ImmutableList">?</a> view via asList(), so viewing the contents of an ImmutableSet<a href="/p/guava-libraries/w/edit/ImmutableSet">?</a> as a random-access list can be done in constant time.&quot; 
</blockquote><p>The copyOf(Collection elements) method does call ((ImmutableCollection<a href="/p/guava-libraries/w/edit/ImmutableCollection">?</a>&lt;E&gt;) elements).asList(), so if asList() did run in constant time, it would be true that calling copyOf(ImmutableCollection<a href="/p/guava-libraries/w/edit/ImmutableCollection">?</a>) would avoid copying the list in full. However, in fact asList() copies all the underlying elements (references to them, which is all that could be done in Java in general), so actually runs in time proportional to the size of the collection, O(n) and thus does not avoid copying the immutable collection: </p><p><a href="http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/collect/ImmutableList.java#250" rel="nofollow">http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/collect/ImmutableList.java#250</a> <a href="http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/collect/ImmutableCollection.java#167" rel="nofollow">http://code.google.com/p/guava-libraries/source/browse/guava/src/com/google/common/collect/ImmutableCollection.java#167</a> The &quot;smoking-gun for-loop&quot;: <a href="http://code.google.com/p/guava-libraries/source/browse/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java#141" rel="nofollow">http://code.google.com/p/guava-libraries/source/browse/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java#141</a> </p><p>I fully agree it is frequently still warranted to make such defensive copies, but the documentation should accurately reflect the reality of what&#x27;s going on beneath the covers. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Wed Mar  7 06:37:42 2012">Mar 7, 2012</span>
 <div>
<div class="commentcontent">
<p>FYI: ImmutableCollection<a href="/p/guava-libraries/w/edit/ImmutableCollection">?</a>.asList() is <i>not</i> usually an explicit copy.  Sure, the default implementation is an explicit copy, but most immutable collections do smarter things when they have the opportunity -- see e.g. RegularImmutableSet<a href="/p/guava-libraries/w/edit/RegularImmutableSet">?</a>. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/112471654124742718187/">dov...@google.com</a
>,
 
 </span>
 <span class="date" title="Thu Mar  8 14:23:50 2012">Mar 8, 2012</span>
 <div>
<div class="commentcontent">
<p>Ah, that makes a lot more sense, then. Sorry that I didn&#x27;t follow through on all subclass implementations before posting. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/russ.abbott/">russ.abbott</a
>,
 
 </span>
 <span class="date" title="Sat Apr 14 20:00:51 2012">Apr 14, 2012</span>
 <div>
<div class="commentcontent">
<p>I&#x27;m a new Guava user. This must be answered somewhere, but I don&#x27;t see where.  I want to construct the difference between two immutable sets, i.e., the immutable equivalent of removeAll.  I would have thought that a Builder would have a removeAll for that. But I don&#x27;t see it. Is there a method defined to do that for me?  Thanks. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/russ.abbott/">russ.abbott</a
>,
 
 </span>
 <span class="date" title="Mon Apr 16 10:43:23 2012">Apr 16, 2012</span>
 <div>
<div class="commentcontent">
<p>I finally discovered <tt>Sets.difference</tt>. Is this the recommended way to do it? </p><pre class="prettyprint">  public static &lt;T&gt; ImmutableSet&lt;T&gt; difference(ImmutableSet&lt;T&gt; A, ImmutableSet&lt;T&gt; B) {
    return Sets.difference(A, B).immutableCopy( );
  }</pre>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Mon Apr 23 12:42:24 2012">Apr 23, 2012</span>
 <div>
<div class="commentcontent">
<p>Yep, that&#x27;s how I&#x27;d do it. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/117859463204133730415/">jet...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Mon May 21 07:40:34 2012">May 21, 2012</span>
 <div>
<div class="commentcontent">
<p>How can I create an read only collection that when adding or deleting element, it will ignore it and not throw UnsupportedOperationException<a href="/p/guava-libraries/w/edit/UnsupportedOperationException">?</a>. Thx. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by  project member 
 
 

 <a class="userlink"
 href="/u/wasserman.louis/">wasserman.louis</a
>,
 
 </span>
 <span class="date" title="Sat May 26 00:29:53 2012">May 26, 2012</span>
 <div>
<div class="commentcontent">
<p>@jetmah, such behavior would violate the Collection contract, so it will not be supported.  In particular, the documentation of Collection.add(E) states: </p><p>&quot;If a collection refuses to add a particular element for any reason other than that it already contains the element, it <i>must</i> throw an exception (rather than returning false). This preserves the invariant that a collection always contains the specified element after this call returns.&quot; </p><p>Similarly, Collection.remove(Object) specifies that if the remove does not fail with UnsupportedOperationException<a href="/p/guava-libraries/w/edit/UnsupportedOperationException">?</a>, ClassCastException<a href="/p/guava-libraries/w/edit/ClassCastException">?</a>, or NullPointerException<a href="/p/guava-libraries/w/edit/NullPointerException">?</a>, that it must return true (and remove the element) if collection.contains(Object). </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment"
 
 >
 
 
 
 
 
 
 <span class="author">Comment
 
 by 
 
 

 <a class="userlink"
 href="/u/113236948829486720072/">math.cla...@gmail.com</a
>,
 
 </span>
 <span class="date" title="Wed May 30 08:13:06 2012">May 30, 2012</span>
 <div>
<div class="commentcontent">
<p>It should be interesting to add in that documentation how to type the of() (with no args) when type can&#x27;t be determined (use with the ternary operator or as a method argument). </p><p>For example : With the following method : &lt;code language=&quot;java&quot; &gt; void doSomethingWithStrings(ImmutableList&lt;String&gt; list){...}
 &lt;/code&gt; </p><p>&lt;code language=&quot;java&quot; &gt; doSomethingWithStrings(ImmutableList.of());
 &lt;/code&gt; is not working because the argument is typed as an ImmutableList&lt;Object&gt; </p><p>It can be rewrite like this :
 &lt;code language=&quot;java&quot; &gt; doSomethingWithStrings(ImmutableList.&lt;String&gt;of());
 &lt;/code&gt; </p><p>I&#x27;ve been using guava for some months, but I&#x27;ve just learned that I can use that java notation.
 </p>
</div>
 
 
 </div>
 </div>
 

</div>
</div>

 


 <script type="text/javascript">
 function delComment(sequence_num, create_time, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.create_time.value = create_time;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 </div>
 
 
 
 
 <br>
 <div class="artifactcomment">
 <span class="indicator">&#9658;</span> <a href="https://www.google.com/accounts/ServiceLogin?service=code&amp;ltmpl=phosting&amp;continue=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FImmutableCollectionsExplained&amp;followup=http%3A%2F%2Fcode.google.com%2Fp%2Fguava-libraries%2Fwiki%2FImmutableCollectionsExplained"
 >Sign in</a> to add a comment
 </div>
 
 
 
 
 <form name="delcom" action="../w/delComment.do" method="POST">
 <input type="hidden" name="sequence_num" value="" >
 <input type="hidden" name="create_time" value="" >
 <input type="hidden" name="mode" value="" >
 <input type="hidden" name="pagename" value="ImmutableCollectionsExplained" >
 <input type="hidden" name="token" value="" >
 </form>


 <script src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/prettify/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/dit_scripts.js"></script>



  
 
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_core.js"></script>
 
 <script type="text/javascript" src="http://www.gstatic.com/codesite/ph/17134919371905794448/js/ph_dwiki.js"></script>
 
 
 
 
</div> 

<div id="footer" dir="ltr">
 <div class="text">
 <a href="/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="/p/support/">Project Hosting Help</a>
 </div>
</div>
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>

 
 


 
 </body>
</html>


